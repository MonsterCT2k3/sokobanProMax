package com.example.myapplication

import android.content.Intent
import android.content.SharedPreferences
import android.os.Bundle
import android.util.Log
import android.widget.Button
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.myapplication.adapters.LevelAdapter
import com.example.myapplication.managers.LevelManager
import com.example.myapplication.managers.MusicManager
import com.example.myapplication.managers.SoundManager
import com.example.myapplication.models.Level

class LevelSelectionActivity : AppCompatActivity() {

    private lateinit var musicManager: MusicManager
    private lateinit var soundManager: SoundManager
    private var isNavigatingToGame = false
    private lateinit var levelAdapter: LevelAdapter
    private lateinit var sharedPreferences: SharedPreferences

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_level_selection)

        // Kh·ªüi t·∫°o MusicManager
        musicManager = MusicManager.getInstance(this)

        // Kh·ªüi t·∫°o SoundManager
        soundManager = SoundManager.getInstance(this)

        // Kh·ªüi t·∫°o SharedPreferences
        sharedPreferences = getSharedPreferences("game_progress", MODE_PRIVATE)

        try {
            Log.d("LevelSelection", "Creating level selection layout")
            setupViews()
            loadLevels()
        } catch (e: Exception) {
            Log.e("LevelSelection", "Error in onCreate", e)
            Toast.makeText(this, "L·ªói: ${e.message}", Toast.LENGTH_LONG).show()
            startGameDirectly()
        }
    }

    private fun setupViews() {
        // Setup back button
        findViewById<Button>(R.id.btn_back).setOnClickListener {
            finish()
        }

        // Setup RecyclerView
        val recyclerView = findViewById<RecyclerView>(R.id.levels_recycler_view)
        recyclerView.layoutManager = GridLayoutManager(this, 2)
        recyclerView.setHasFixedSize(true)
    }

    private fun loadLevels() {
        val levels = LevelManager.getAllLevels()
        Log.d("LevelSelection", "Found ${levels.size} levels")

        if (levels.isEmpty()) {
            Toast.makeText(this, "Kh√¥ng t√¨m th·∫•y level n√†o!", Toast.LENGTH_LONG).show()
            startGameDirectly()
            return
        }

        // Get last completed level from SharedPreferences
        val lastCompletedLevel = sharedPreferences.getInt("last_completed_level", 0)
        println("üìä Last completed level: $lastCompletedLevel")

        // Setup adapter
        levelAdapter = LevelAdapter(this, levels) { level ->
            println("üéÆ Starting game with level ${level.id}")
            startGameWithLevel(level.id)
        }
        levelAdapter.setLastCompletedLevel(lastCompletedLevel)

        findViewById<RecyclerView>(R.id.levels_recycler_view).adapter = levelAdapter

        // Update progress text
        updateProgressText(levels.size, lastCompletedLevel)
    }

    private fun updateProgressText(totalLevels: Int, completedLevels: Int) {
        val progressText = findViewById<TextView>(R.id.progress_text)
        progressText.text = "Ho√†n th√†nh: $completedLevels/$totalLevels levels"
    }

    private fun loadSoundSettings() {
        // Load sound settings t·ª´ SharedPreferences "audio_settings"
        val audioPrefs = getSharedPreferences("audio_settings", MODE_PRIVATE)
        val soundEnabled = audioPrefs.getBoolean("sound_enabled", true)
        val soundVolume = audioPrefs.getFloat("sound_volume", 0.5f)

        // Apply settings
        soundManager.setMuted(!soundEnabled)
        soundManager.setVolume(soundVolume)

        println("üîä Sound settings loaded - enabled: $soundEnabled, volume: $soundVolume")
    }
    
    private fun startGameWithLevel(levelId: Int) {
        Log.d("LevelSelection", "Starting game with level $levelId")
        isNavigatingToGame = true
        val intent = Intent(this, GameButtonActivity::class.java).apply {
            putExtra("LEVEL_ID", levelId)
        }
        startActivity(intent)
    }
    
    private fun startGameDirectly() {
        Log.d("LevelSelection", "Starting game with default level")
        isNavigatingToGame = true
        val intent = Intent(this, GameButtonActivity::class.java).apply {
            putExtra("LEVEL_ID", 1)
        }
        startActivity(intent)
        finish()
    }

    override fun onResume() {
        super.onResume()
        // Reset flag v√† ti·∫øp t·ª•c ph√°t nh·∫°c khi quay l·∫°i t·ª´ game
        isNavigatingToGame = false
        musicManager.resumeMusic()

        // üîä Lu√¥n load sound settings khi resume ƒë·ªÉ ƒë·ªìng b·ªô v·ªõi settings ƒë√£ l∆∞u
        loadSoundSettings()
        println("üîä LevelSelection resumed - soundManager.isMuted(): ${soundManager.isMuted()}, volume: ${soundManager.getVolume()}")

        // Test sound ƒë·ªÉ xem c√≥ ho·∫°t ƒë·ªông kh√¥ng
        soundManager.playSound("move", 0.1f)  // Test v·ªõi volume nh·ªè
    }

    override fun onPause() {
        super.onPause()
        // Ch·ªâ t·∫°m d·ª´ng nh·∫°c khi kh√¥ng chuy·ªÉn sang game
        if (!isNavigatingToGame) {
            musicManager.pauseMusic()
        }
    }
}