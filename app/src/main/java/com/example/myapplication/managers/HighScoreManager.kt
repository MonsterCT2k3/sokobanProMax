package com.example.myapplication.managers

import android.content.Context
import android.content.SharedPreferences
import org.json.JSONArray
import org.json.JSONObject

/**
 * üèÜ HighScoreManager - Qu·∫£n l√Ω top 10 k·ª∑ l·ª•c th·ªùi gian ho√†n th√†nh level
 */
class HighScoreManager(private val context: Context) {

    private val prefs: SharedPreferences = context.getSharedPreferences("high_scores", Context.MODE_PRIVATE)

    companion object {
        private const val KEY_PREFIX = "level_high_scores_"
        private const val MAX_SCORES_PER_LEVEL = 10
    }

    /**
     * L∆∞u k·ª∑ l·ª•c cho level (l∆∞u top 10 th·ªùi gian t·ªët nh·∫•t)
     */
    fun saveHighScore(levelId: Int, timeMillis: Long) {
        val key = getKeyForLevel(levelId)
        val currentScores = getHighScores(levelId).toMutableList()

        // Th√™m th·ªùi gian m·ªõi
        currentScores.add(timeMillis)

        // S·∫Øp x·∫øp theo th·ªùi gian tƒÉng d·∫ßn (th·ªùi gian ng·∫Øn nh·∫•t l√™n ƒë·∫ßu)
        currentScores.sort()

        // Gi·ªØ ch·ªâ top 10
        val topScores = currentScores.take(MAX_SCORES_PER_LEVEL)

        // L∆∞u d∆∞·ªõi d·∫°ng JSON array
        val jsonArray = JSONArray()
        topScores.forEach { jsonArray.put(it) }

        prefs.edit().putString(key, jsonArray.toString()).apply()
    }

    /**
     * L·∫•y danh s√°ch top 10 k·ª∑ l·ª•c cho level
     */
    fun getHighScores(levelId: Int): List<Long> {
        val key = getKeyForLevel(levelId)
        val jsonString = prefs.getString(key, null) ?: return emptyList()

        return try {
            val jsonArray = JSONArray(jsonString)
            (0 until jsonArray.length()).map { jsonArray.getLong(it) }
        } catch (e: Exception) {
            emptyList()
        }
    }

    /**
     * L·∫•y k·ª∑ l·ª•c t·ªët nh·∫•t cho level (th·ªùi gian ng·∫Øn nh·∫•t)
     */
    fun getBestHighScore(levelId: Int): Long? {
        val scores = getHighScores(levelId)
        return scores.minOrNull()
    }

    /**
     * Ki·ªÉm tra xem th·ªùi gian c√≥ v√†o top 10 kh√¥ng
     */
    fun isNewHighScore(levelId: Int, timeMillis: Long): Boolean {
        val currentScores = getHighScores(levelId)

        // N·∫øu ch∆∞a c√≥ k·ª∑ l·ª•c n√†o
        if (currentScores.isEmpty()) return true

        // N·∫øu ch∆∞a ƒë·ªß 10 k·ª∑ l·ª•c
        if (currentScores.size < MAX_SCORES_PER_LEVEL) return true

        // N·∫øu th·ªùi gian m·ªõi t·ªët h∆°n k·ª∑ l·ª•c k√©m nh·∫•t hi·ªán t·∫°i
        return timeMillis < currentScores.last()
    }

    /**
     * Ki·ªÉm tra xem th·ªùi gian c√≥ ph·∫£i k·ª∑ l·ª•c t·ªët nh·∫•t kh√¥ng
     */
    fun isBestHighScore(levelId: Int, timeMillis: Long): Boolean {
        val bestScore = getBestHighScore(levelId)
        return bestScore == null || timeMillis < bestScore
    }

    /**
     * Format th·ªùi gian th√†nh MM:SS
     */
    fun formatTime(timeMillis: Long): String {
        val totalSeconds = timeMillis / 1000
        val minutes = totalSeconds / 60
        val seconds = totalSeconds % 60
        return String.format("%02d:%02d", minutes, seconds)
    }

    /**
     * X√≥a t·∫•t c·∫£ k·ª∑ l·ª•c (cho debug)
     */
    fun clearAllHighScores() {
        val editor = prefs.edit()
        val allKeys = prefs.all.keys.filter { it.startsWith(KEY_PREFIX) }
        allKeys.forEach { editor.remove(it) }
        editor.apply()
    }

    /**
     * L·∫•y danh s√°ch t·∫•t c·∫£ level c√≥ k·ª∑ l·ª•c
     */
    fun getAllLevelsWithScores(): Set<Int> {
        return prefs.all
            .keys
            .filter { it.startsWith(KEY_PREFIX) }
            .mapNotNull { key ->
                key.removePrefix(KEY_PREFIX).toIntOrNull()
            }
            .toSet()
    }

    /**
     * L·∫•y s·ªë l∆∞·ª£ng k·ª∑ l·ª•c c·ªßa level
     */
    fun getScoreCount(levelId: Int): Int {
        return getHighScores(levelId).size
    }

    private fun getKeyForLevel(levelId: Int): String {
        return "$KEY_PREFIX$levelId"
    }
}
