package com.example.myapplication.rendering

import android.content.Context
import android.graphics.Bitmap
import android.graphics.Canvas
import android.graphics.Color
import android.graphics.Paint
import android.graphics.drawable.Drawable
import com.example.myapplication.entities.Monster
import com.example.myapplication.game.PlayerDirection
import kotlin.math.min

/**
 * üó∫Ô∏è BoardRenderer - V·∫Ω game board v√† c√°c entities
 *
 * Nhi·ªám v·ª•:
 * - V·∫Ω map tiles (t∆∞·ªùng, s√†n, h·ªôp, m·ª•c ti√™u)
 * - V·∫Ω player v·ªõi depth sorting
 * - V·∫Ω monsters v·ªõi depth sorting
 * - V·∫Ω safe zones
 */
class BoardRenderer(private val context: Context, private val gameRenderer: GameRenderer) {

    // Monster size constants - d·ªÖ d√†ng ƒëi·ªÅu ch·ªânh
    companion object {
        private const val MONSTER_WIDTH_RATIO = 1.0f   // 70% chi·ªÅu r·ªông tile
        private const val MONSTER_HEIGHT_RATIO = 1.0f  // 100% chi·ªÅu cao tile (gi·ªØ nguy√™n)
    }

    // Cached bitmaps for performance
    private var cachedBitmaps: Map<Char, Bitmap>? = null
    private var cachedTileSize: Int = 0

    // Screen dimensions
    private var screenWidth = 0
    private var screenHeight = 0

    fun setScreenSize(width: Int, height: Int) {
        screenWidth = width
        screenHeight = height
    }

    /**
     * üó∫Ô∏è V·∫Ω to√†n b·ªô game board
     */
    fun drawGameBoard(canvas: Canvas, map: Array<CharArray>, playerRow: Int, playerCol: Int,
                     playerDirection: PlayerDirection, monsters: List<Monster>, safeZonePositions: Set<Pair<Int, Int>>) {
        if (map.isEmpty() || map[0].isEmpty()) return

        val tileSize = min(screenWidth / map[0].size, screenHeight / map.size)

        // Update cached bitmaps if needed
        if (cachedBitmaps == null || cachedTileSize != tileSize) {
            cachedTileSize = tileSize
            cachedBitmaps = mapOf(
                '#' to drawableToBitmap(gameRenderer.getWall(), tileSize),
                'G' to drawableToBitmap(gameRenderer.getGoal(), tileSize),
                'S' to drawableToBitmap(gameRenderer.getSafeZone(), tileSize),
                '.' to drawableToBitmap(gameRenderer.getFloor(), tileSize)
            )
        }
        val bitmaps = cachedBitmaps!!

        // T√≠nh to√°n ƒë·ªÉ center game board
        val boardWidth = map[0].size * tileSize
        val boardHeight = map.size * tileSize
        val offsetX = (screenWidth - boardWidth) / 2f
        val offsetY = (screenHeight - boardHeight) / 2f

        // B∆Ø·ªöC 1: V·∫Ω t·∫•t c·∫£ tiles tr∆∞·ªõc (n·ªÅn, t∆∞·ªùng, h·ªôp, m·ª•c ti√™u)
        drawTiles(canvas, map, bitmaps, tileSize, offsetX, offsetY, safeZonePositions)

        // B∆Ø·ªöC 2: V·∫Ω entities (player + monsters) theo th·ª© t·ª± depth (Y-coordinate)
        drawEntitiesWithDepthSort(canvas, map, playerRow, playerCol, monsters, playerDirection, tileSize, offsetX, offsetY)
    }

    /**
     * üé® V·∫Ω t·∫•t c·∫£ tiles tr√™n map
     */
    private fun drawTiles(canvas: Canvas, map: Array<CharArray>, bitmaps: Map<Char, Bitmap>,
                         tileSize: Int, offsetX: Float, offsetY: Float, safeZonePositions: Set<Pair<Int, Int>>) {
        for (i in map.indices) {
            for (j in map[i].indices) {
                val x = offsetX + j * tileSize.toFloat()
                val y = offsetY + i * tileSize.toFloat()

                // X√°c ƒë·ªãnh n·ªÅn c·∫ßn v·∫Ω (floor, wall, goal, safe zone)
                val baseTile = when (map[i][j]) {
                    'B' -> '.'  // Box hi·ªÉn th·ªã n·ªÅn floor
                    else -> map[i][j]  // Wall, goal, safe zone, floor gi·ªØ nguy√™n
                }

                // V·∫Ω b√≥ng cho non-floor tiles (wall, goal, safe zone)
                if (baseTile != '.' && baseTile != 'S') {
                    canvas.drawRect(x + 3, y + 3, x + tileSize + 3, y + tileSize + 3,
                                   gameRenderer.getShadowPaint())
                }

                // V·∫Ω n·ªÅn (wall, goal, safe zone, floor)
                val bitmap = bitmaps[baseTile] ?: bitmaps['.']!!
                canvas.drawBitmap(bitmap, x, y, gameRenderer.getTilePaint())

                // üÜï V·∫Ω h·ªôp n·∫øu v·ªã tr√≠ c√≥ h·ªôp ('B')
                if (map[i][j] == 'B') {
                    val boxBitmap = drawableToBitmap(gameRenderer.getBox(), tileSize)
                    canvas.drawBitmap(boxBitmap, x, y, gameRenderer.getTilePaint())

                    // V·∫Ω b√≥ng cho h·ªôp
                    canvas.drawRect(x + 3, y + 3, x + tileSize + 3, y + tileSize + 3,
                                   gameRenderer.getShadowPaint())
                }
            }
        }
    }

    /**
     * üé≠ V·∫Ω t·∫•t c·∫£ entities (player + monsters) theo th·ª© t·ª± depth sorting
     * Entities ·ªü ph√≠a d∆∞·ªõi (Y l·ªõn h∆°n) s·∫Ω ƒë∆∞·ª£c v·∫Ω sau ƒë·ªÉ che entities ·ªü ph√≠a tr√™n
     */
    private fun drawEntitiesWithDepthSort(canvas: Canvas, map: Array<CharArray>, playerRow: Int, playerCol: Int,
                                         monsters: List<Monster>, playerDirection: PlayerDirection,
                                         tileSize: Int, offsetX: Float, offsetY: Float) {

        // 1Ô∏è‚É£ T·∫°o danh s√°ch t·∫•t c·∫£ entities v·ªõi th√¥ng tin depth
        data class EntityToDraw(
            val type: String,  // "player" ho·∫∑c "monster"
            val x: Float,
            val y: Float,
            val depth: Int,    // Y-coordinate cho sorting (row index)
            val monster: Monster? = null
        )

        val entitiesToDraw = mutableListOf<EntityToDraw>()

        // 2Ô∏è‚É£ Th√™m player v√†o danh s√°ch (d√πng position tr·ª±c ti·∫øp)
        val playerScreenX = offsetX + playerCol * tileSize.toFloat()  // playerCol l√† column
        val playerScreenY = offsetY + playerRow * tileSize.toFloat()  // playerRow l√† row
        entitiesToDraw.add(EntityToDraw("player", playerScreenX, playerScreenY, playerRow))  // playerRow l√† row = depth

        // 3Ô∏è‚É£ Th√™m monsters v√†o danh s√°ch
        monsters.forEach { monster ->
            if (monster.isActive) {
                val x = offsetX + monster.currentY * tileSize.toFloat()  // Convert tileSize to Float
                val y = offsetY + monster.currentX * tileSize.toFloat()  // Convert tileSize to Float
                entitiesToDraw.add(EntityToDraw("monster", x, y, monster.currentX.toInt(), monster))  // Convert currentX to Int for depth
            }
        }

        // 4Ô∏è‚É£ Sort theo depth (Y-coordinate): entities ·ªü tr√™n v·∫Ω tr∆∞·ªõc, ·ªü d∆∞·ªõi v·∫Ω sau
        entitiesToDraw.sortBy { it.depth }

        // 5Ô∏è‚É£ V·∫Ω theo th·ª© t·ª± ƒë√£ sort
        entitiesToDraw.forEach { entity ->
            when (entity.type) {
                "player" -> {
                    val playerDrawable = gameRenderer.getCurrentPlayerDrawable(playerDirection)
                    val playerBitmap = drawableToBitmap(playerDrawable, tileSize)
                    canvas.drawBitmap(playerBitmap, entity.x, entity.y, gameRenderer.getTilePaint())
                }
                "monster" -> {
                    entity.monster?.let { monster ->
                        drawSingleMonster(canvas, monster, entity.x, entity.y, tileSize)
                    }
                }
            }
        }
    }

    /**
     * üëπ V·∫Ω m·ªôt monster ƒë∆°n l·∫ª t·∫°i v·ªã tr√≠ c·ª• th·ªÉ
     */
    private fun drawSingleMonster(canvas: Canvas, monster: Monster, x: Float, y: Float, tileSize: Int) {
        // 1Ô∏è‚É£ KH√îNG v·∫Ω floor tile - ƒë·ªÉ monster blend tr·ª±c ti·∫øp v·ªõi n·ªÅn ƒë√£ c√≥
        // Floor tile ƒë√£ ƒë∆∞·ª£c v·∫Ω trong B∆Ø·ªöC 1 c·ªßa drawGameBoard

        // 2Ô∏è‚É£ L·∫•y drawable cho monster
        val monsterDrawable = gameRenderer.getMonsterDrawable(monster.type)

        // 3Ô∏è‚É£ T√πy ch·ªânh k√≠ch th∆∞·ªõc monster theo constants
        val monsterWidth = (tileSize * MONSTER_WIDTH_RATIO).toInt()   // Chi·ªÅu r·ªông t√πy ch·ªânh
        val monsterHeight = (tileSize * MONSTER_HEIGHT_RATIO).toInt() // Chi·ªÅu cao t√πy ch·ªânh

        val monsterBitmap = drawableToBitmapCustomSize(monsterDrawable, monsterWidth, monsterHeight)

        // 4Ô∏è‚É£ T√≠nh v·ªã tr√≠ center ƒë·ªÉ monster kh√¥ng b·ªã l·ªách
        val centerOffsetX = (tileSize - monsterWidth) / 2f
        val drawX = x + centerOffsetX

        // 5Ô∏è‚É£ T·∫°m th·ªùi t·∫Øt shadow ƒë·ªÉ test monster ho√†n to√†n trong su·ªët
        // TODO: C√≥ th·ªÉ b·∫≠t l·∫°i sau khi ƒë√£ test
        /*
        canvas.drawRect(drawX + 2, y + 2, drawX + monsterWidth + 2, y + monsterHeight + 2, shadowPaint)
        */

        // 6Ô∏è‚É£ V·∫Ω monster v·ªõi alpha transparency
        canvas.drawBitmap(monsterBitmap, drawX, y, gameRenderer.getMonsterPaint())
    }

    /**
     * üëπ V·∫Ω t·∫•t c·∫£ monsters l√™n canvas (method c≈© - gi·ªØ l·∫°i ƒë·ªÉ t∆∞∆°ng th√≠ch)
     */
    private fun drawMonsters(canvas: Canvas, monsters: List<Monster>, tileSize: Int, offsetX: Float, offsetY: Float) {
        monsters.forEach { monster ->
            if (monster.isActive) {
                // üÜï Effect cho monster b·ªã stun
                if (monster.isStunned()) {
                    // V·∫Ω hi·ªáu ·ª©ng stun (v√≤ng tr√≤n t√≠m xung quanh)
                    val stunPaint = Paint().apply {
                        color = Color.MAGENTA
                        style = Paint.Style.STROKE
                        strokeWidth = 3f
                        alpha = 180
                    }
                    val stunRadius = tileSize * 0.6f
                    val stunX = offsetX + monster.currentY * tileSize.toFloat()
                    val stunY = offsetY + monster.currentX * tileSize.toFloat()
                    canvas.drawCircle(stunX, stunY, stunRadius, stunPaint)
                }

                // 1Ô∏è‚É£ L·∫•y drawable cho monster
                val monsterDrawable = gameRenderer.getMonsterDrawable(monster.type)

                // 2Ô∏è‚É£ T√≠nh v·ªã tr√≠ render (smooth position)
                val x = offsetX + monster.currentY * tileSize.toFloat()  // currentY l√† column
                val y = offsetY + monster.currentX * tileSize.toFloat()  // currentX l√† row

                // 3Ô∏è‚É£ T√πy ch·ªânh k√≠ch th∆∞·ªõc monster theo constants
                val monsterWidth = (tileSize * MONSTER_WIDTH_RATIO).toInt()   // Chi·ªÅu r·ªông t√πy ch·ªânh
                val monsterHeight = (tileSize * MONSTER_HEIGHT_RATIO).toInt() // Chi·ªÅu cao t√πy ch·ªânh

                val monsterBitmap = drawableToBitmapCustomSize(monsterDrawable, monsterWidth, monsterHeight)

                // 4Ô∏è‚É£ T√≠nh v·ªã tr√≠ center ƒë·ªÉ monster kh√¥ng b·ªã l·ªách
                val centerOffsetX = (tileSize - monsterWidth) / 2f
                val drawX = x + centerOffsetX

                // 5Ô∏è‚É£ V·∫Ω shadow
                canvas.drawRect(drawX + 2, y + 2, drawX + monsterWidth + 2, y + monsterHeight + 2, gameRenderer.getShadowPaint())

                // 6Ô∏è‚É£ V·∫Ω monster v·ªõi alpha transparency
                canvas.drawBitmap(monsterBitmap, drawX, y, gameRenderer.getMonsterPaint())
            }
        }
    }

    /**
     * üñºÔ∏è Convert Drawable th√†nh Bitmap
     */
    private fun drawableToBitmap(drawable: Drawable, size: Int): Bitmap {
        val bitmap = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888)
        val canvas = Canvas(bitmap)

        // X√≥a ho√†n to√†n n·ªÅn - ƒë·∫£m b·∫£o trong su·ªët 100%
        canvas.drawColor(Color.TRANSPARENT, android.graphics.PorterDuff.Mode.CLEAR)

        drawable.setBounds(0, 0, size, size)
        drawable.draw(canvas)
        return bitmap
    }

    /**
     * üé® T·∫°o bitmap v·ªõi k√≠ch th∆∞·ªõc custom (width ‚â† height)
     * @param drawable Drawable c·∫ßn chuy·ªÉn ƒë·ªïi
     * @param width Chi·ªÅu r·ªông mong mu·ªën
     * @param height Chi·ªÅu cao mong mu·ªën
     */
    private fun drawableToBitmapCustomSize(drawable: Drawable, width: Int, height: Int): Bitmap {
        val bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)
        val canvas = Canvas(bitmap)

        // ƒê·∫£m b·∫£o n·ªÅn ho√†n to√†n trong su·ªët v·ªõi nhi·ªÅu method
        canvas.drawColor(Color.TRANSPARENT, android.graphics.PorterDuff.Mode.CLEAR)

        // T·∫°o Paint ƒë·∫∑c bi·ªát cho drawable
        val drawablePaint = Paint().apply {
            isAntiAlias = true
            isFilterBitmap = true
            isDither = true
        }

        drawable.setBounds(0, 0, width, height)
        drawable.draw(canvas)
        return bitmap
    }

    /**
     * üìê T√≠nh tile size - public method for backward compatibility
     */
    fun calculateTileSize(map: Array<CharArray>): Int {
        return min(screenWidth / map[0].size, screenHeight / map.size)
    }

    /**
     * üìç T√≠nh board offset - public method for backward compatibility
     */
    fun calculateBoardOffset(map: Array<CharArray>): Pair<Float, Float> {
        val tileSize = calculateTileSize(map).toFloat()
        val boardWidth = map[0].size * tileSize
        val boardHeight = map.size * tileSize
        val offsetX = (screenWidth - boardWidth) / 2f
        val offsetY = (screenHeight - boardHeight) / 2f
        return Pair(offsetX, offsetY)
    }
}
