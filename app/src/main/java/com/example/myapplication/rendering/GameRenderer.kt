package com.example.myapplication.rendering

import android.content.Context
import android.graphics.Bitmap
import android.graphics.Canvas
import android.graphics.Color
import android.graphics.Paint
import android.graphics.RectF
import android.graphics.Typeface
import android.graphics.drawable.Drawable
import androidx.core.content.ContextCompat
import com.example.myapplication.R
import com.example.myapplication.entities.AmmoPickup
import com.example.myapplication.entities.AmmoType
import com.example.myapplication.entities.Bullet
import com.example.myapplication.entities.BulletDirection
import com.example.myapplication.entities.BulletType
import com.example.myapplication.entities.LivesPickup
import com.example.myapplication.game.PlayerDirection
import kotlin.math.min
import com.example.myapplication.entities.Monster
import com.example.myapplication.entities.MonsterType

class GameRenderer(private val context: Context) {
    
    // Monster size constants - d·ªÖ d√†ng ƒëi·ªÅu ch·ªânh
    companion object {
        private const val MONSTER_WIDTH_RATIO = 1.0f   // 70% chi·ªÅu r·ªông tile
        private const val MONSTER_HEIGHT_RATIO = 1.0f  // 100% chi·ªÅu cao tile (gi·ªØ nguy√™n)
    }
    
    // Drawable resources
    private lateinit var wall: Drawable
    private lateinit var box: Drawable
    private lateinit var goal: Drawable
    private lateinit var floor: Drawable
    private lateinit var playerUp: Drawable
    private lateinit var playerDown: Drawable
    private lateinit var playerLeft: Drawable
    private lateinit var playerRight: Drawable
    private lateinit var monsterPatrol: Drawable
    private lateinit var monsterStraight: Drawable
    private lateinit var bulletUp: Drawable
    private lateinit var bulletDown: Drawable
    private lateinit var bulletLeft: Drawable
    private lateinit var bulletRight: Drawable
    private lateinit var itemBullet: Drawable  // üÜï TH√äM ITEM BULLET
    private lateinit var rocket: Drawable     // üÜï TH√äM ROCKET

    private lateinit var musicOnIcon: Drawable
    private lateinit var musicOffIcon: Drawable
    private lateinit var soundOnIcon: Drawable
    private lateinit var soundOffIcon: Drawable
    
    // Paint objects
    private lateinit var tilePaint: Paint
    private lateinit var textPaint: Paint
    private lateinit var shadowPaint: Paint
    private lateinit var monsterPaint: Paint
    
    // Cached bitmaps for performance
    private var cachedBitmaps: Map<Char, Bitmap>? = null
    private var cachedTileSize: Int = 0
    
    // Screen dimensions
    private var screenWidth = 0
    private var screenHeight = 0
    
    init {
        initResources()
        initPaints()
    }
    
    private fun initResources() {
        wall = ContextCompat.getDrawable(context, R.drawable.wall)
            ?: throw IllegalStateException("wall drawable not found")
        box = ContextCompat.getDrawable(context, R.drawable.box)
            ?: throw IllegalStateException("box drawable not found")
        goal = ContextCompat.getDrawable(context, R.drawable.goal)
            ?: throw IllegalStateException("goal drawable not found")
        playerUp = ContextCompat.getDrawable(context, R.drawable.hero_up)
            ?: throw IllegalStateException("player drawable not found")
        playerDown = ContextCompat.getDrawable(context, R.drawable.hero_down)
            ?: throw IllegalStateException("player drawable not found")
        playerLeft = ContextCompat.getDrawable(context, R.drawable.hero_left)
            ?: throw IllegalStateException("player drawable not found")
        playerRight = ContextCompat.getDrawable(context, R.drawable.hero_right)
            ?: throw IllegalStateException("player drawable not found")
        floor = ContextCompat.getDrawable(context, R.drawable.floor)
            ?: throw IllegalStateException("floor drawable not found")
        monsterPatrol = ContextCompat.getDrawable(context, R.drawable.monster_patrol)
            ?: throw IllegalStateException("monster drawable not found")
        monsterStraight = ContextCompat.getDrawable(context, R.drawable.zombie)
            ?: throw IllegalStateException("monster drawable not found")

        // Load bullet drawables for each direction
        bulletUp = ContextCompat.getDrawable(context, R.drawable.bullet_up)
            ?: throw IllegalStateException("bullet_up drawable not found")
        bulletDown = ContextCompat.getDrawable(context, R.drawable.bullet_down)
            ?: throw IllegalStateException("bullet_down drawable not found")
        bulletLeft = ContextCompat.getDrawable(context, R.drawable.bullet_left)
            ?: throw IllegalStateException("bullet_left drawable not found")
        bulletRight = ContextCompat.getDrawable(context, R.drawable.bullet_right)
            ?: throw IllegalStateException("bullet_right drawable not found")
        itemBullet = ContextCompat.getDrawable(context, R.drawable.item_bullet)
            ?: throw IllegalStateException("item_bullet drawable not found")  // üÜï LOAD ITEM BULLET
        rocket = ContextCompat.getDrawable(context, R.drawable.rocket)
            ?: throw IllegalStateException("rocket drawable not found")  // üÜï LOAD ROCKET

        musicOnIcon = ContextCompat.getDrawable(context, R.drawable.music_on)
            ?: throw IllegalStateException("music_on drawable not found")
        musicOffIcon = ContextCompat.getDrawable(context, R.drawable.music_off)
            ?: throw IllegalStateException("music_off drawable not found")
        soundOnIcon = ContextCompat.getDrawable(context, R.drawable.sound_on)
            ?: throw IllegalStateException("sound_on drawable not found")
        soundOffIcon = ContextCompat.getDrawable(context, R.drawable.sound_off)
            ?: throw IllegalStateException("sound_off drawable not found")
    }

    /**
     * üëπ L·∫•y drawable cho monster theo type
     */
    private fun getMonsterDrawable(type: MonsterType): Drawable {
        return when (type) {
            MonsterType.PATROL -> monsterPatrol
            MonsterType.CIRCLE -> monsterPatrol  // T·∫°m d√πng chung
            MonsterType.RANDOM -> monsterPatrol  // T·∫°m d√πng chung
            MonsterType.CHASE -> monsterPatrol   // T·∫°m d√πng chung
            MonsterType.STRAIGHT -> monsterStraight
            MonsterType.BOUNCE -> monsterStraight  // T·∫°m d√πng zombie sprite cho bounce
        }
    }

    /**
     * üéØ L·∫•y drawable cho bullet theo h∆∞·ªõng
     */
    private fun getBulletDrawable(direction: BulletDirection): Drawable {
        return when (direction) {
            BulletDirection.UP -> bulletUp
            BulletDirection.DOWN -> bulletDown
            BulletDirection.LEFT -> bulletLeft
            BulletDirection.RIGHT -> bulletRight
        }
    }

    // Th√™m method m·ªõi v√†o GameRenderer:
    private fun getCurrentPlayerDrawable(direction: PlayerDirection): Drawable {
        return when (direction) {
            PlayerDirection.UP -> playerUp
            PlayerDirection.DOWN -> playerDown
            PlayerDirection.LEFT -> playerLeft
            PlayerDirection.RIGHT -> playerRight
        }
    }
    
    private fun initPaints() {
        tilePaint = Paint().apply {
            isAntiAlias = true
            isFilterBitmap = true
        }

        textPaint = Paint().apply {
            color = Color.WHITE
            textSize = 48f
            typeface = Typeface.DEFAULT_BOLD
            isAntiAlias = true
            textAlign = Paint.Align.CENTER
        }

        shadowPaint = Paint().apply {
            color = Color.BLACK
            alpha = 80
        }

        monsterPaint = Paint().apply {
            isAntiAlias = true
            isFilterBitmap = true
            alpha = 255
            // T·ªëi ∆∞u cho transparency ho√†n h·∫£o
            isDither = true
            // V·ªÅ l·∫°i SRC_OVER v·ªõi settings t·ªëi ∆∞u
            xfermode = null  // SRC_OVER default - t·ªët nh·∫•t cho PNG v·ªõi alpha
        }
    }
    
    fun setScreenSize(width: Int, height: Int) {
        screenWidth = width
        screenHeight = height
    }
    
    fun drawGameBoard(canvas: Canvas, map: Array<CharArray>, playerDirection: PlayerDirection, monsters: List<Monster>) {
        if (map.isEmpty() || map[0].isEmpty()) return

        val tileSize = min(screenWidth / map[0].size, screenHeight / map.size)

        // Update cached bitmaps if needed
        if (cachedBitmaps == null || cachedTileSize != tileSize) {
            cachedTileSize = tileSize
            cachedBitmaps = mapOf(
                '#' to drawableToBitmap(wall, tileSize),
                'B' to drawableToBitmap(box, tileSize),
                'G' to drawableToBitmap(goal, tileSize),
                'S' to drawableToBitmap(goal, tileSize),  // Safe zone d√πng goal drawable
                '.' to drawableToBitmap(floor, tileSize)
            )
        }
        val bitmaps = cachedBitmaps!!

        // T√≠nh to√°n ƒë·ªÉ center game board
        val boardWidth = map[0].size * tileSize
        val boardHeight = map.size * tileSize
        val offsetX = (screenWidth - boardWidth) / 2f
        val offsetY = (screenHeight - boardHeight) / 2f

        // B∆Ø·ªöC 1: V·∫Ω t·∫•t c·∫£ tiles tr∆∞·ªõc (n·ªÅn, t∆∞·ªùng, h·ªôp, m·ª•c ti√™u)
        for (i in map.indices) {
            for (j in map[i].indices) {
                val x = offsetX + j * tileSize.toFloat()
                val y = offsetY + i * tileSize.toFloat()

                // V·∫Ω b√≥ng cho non-floor tiles
                if (map[i][j] != '.') {
                    canvas.drawRect(x + 3, y + 3, x + tileSize + 3, y + tileSize + 3, shadowPaint)
                }

                // V·∫Ω tile (t∆∞·ªùng, h·ªôp, m·ª•c ti√™u, s√†n)
                val bitmap = bitmaps[map[i][j]] ?: bitmaps['.']!!
                canvas.drawBitmap(bitmap, x, y, tilePaint)

                // üÜï Overlay cho safe zone (√¥ 'S')
                if (map[i][j] == 'S') {
                    val safeZonePaint = Paint().apply {
                        color = Color.argb(120, 0, 150, 255)  // M√†u xanh d∆∞∆°ng trong su·ªët
                        style = Paint.Style.FILL
                    }
                    canvas.drawRect(x, y, x + tileSize, y + tileSize, safeZonePaint)

                    // V·∫Ω vi·ªÅn xanh d∆∞∆°ng
                    val borderPaint = Paint().apply {
                        color = Color.rgb(0, 100, 200)
                        style = Paint.Style.STROKE
                        strokeWidth = 2f
                    }
                    canvas.drawRect(x, y, x + tileSize, y + tileSize, borderPaint)
                }
            }
        }

        // B∆Ø·ªöC 2: V·∫Ω entities (player + monsters) theo th·ª© t·ª± depth (Y-coordinate)
        drawEntitiesWithDepthSort(canvas, map, monsters, playerDirection, tileSize, offsetX, offsetY)
    }

    /**
     * üé≠ V·∫Ω t·∫•t c·∫£ entities (player + monsters) theo th·ª© t·ª± depth sorting
     * Entities ·ªü ph√≠a d∆∞·ªõi (Y l·ªõn h∆°n) s·∫Ω ƒë∆∞·ª£c v·∫Ω sau ƒë·ªÉ che entities ·ªü ph√≠a tr√™n
     */
    private fun drawEntitiesWithDepthSort(canvas: Canvas, map: Array<CharArray>, monsters: List<Monster>, 
                                        playerDirection: PlayerDirection, tileSize: Int, offsetX: Float, offsetY: Float) {
        
        // 1Ô∏è‚É£ T·∫°o danh s√°ch t·∫•t c·∫£ entities v·ªõi th√¥ng tin depth
        data class EntityToDraw(
            val type: String,  // "player" ho·∫∑c "monster"
            val x: Float,
            val y: Float, 
            val depth: Int,    // Y-coordinate cho sorting (row index)
            val monster: Monster? = null
        )
        
        val entitiesToDraw = mutableListOf<EntityToDraw>()
        
        // 2Ô∏è‚É£ Th√™m player v√†o danh s√°ch
        for (i in map.indices) {
            for (j in map[i].indices) {
                if (map[i][j] == '@') {
                    val x = offsetX + j * tileSize.toFloat()
                    val y = offsetY + i * tileSize.toFloat()
                    entitiesToDraw.add(EntityToDraw("player", x, y, i))  // i l√† row = depth
                }
            }
        }
        
        // 3Ô∏è‚É£ Th√™m monsters v√†o danh s√°ch
        monsters.forEach { monster ->
            if (monster.isActive) {
                val x = offsetX + monster.currentY * tileSize.toFloat()  // Convert tileSize to Float
                val y = offsetY + monster.currentX * tileSize.toFloat()  // Convert tileSize to Float
                entitiesToDraw.add(EntityToDraw("monster", x, y, monster.currentX.toInt(), monster))  // Convert currentX to Int for depth
            }
        }
        
        // 4Ô∏è‚É£ Sort theo depth (Y-coordinate): entities ·ªü tr√™n v·∫Ω tr∆∞·ªõc, ·ªü d∆∞·ªõi v·∫Ω sau
        entitiesToDraw.sortBy { it.depth }
        
        // 5Ô∏è‚É£ V·∫Ω theo th·ª© t·ª± ƒë√£ sort
        entitiesToDraw.forEach { entity ->
            when (entity.type) {
                "player" -> {
                    val playerDrawable = getCurrentPlayerDrawable(playerDirection)
                    val playerBitmap = drawableToBitmap(playerDrawable, tileSize)
                    canvas.drawBitmap(playerBitmap, entity.x, entity.y, tilePaint)
                }
                "monster" -> {
                    entity.monster?.let { monster ->
                        drawSingleMonster(canvas, monster, entity.x, entity.y, tileSize)
                    }
                }
            }
        }
    }

    /**
     * üëπ V·∫Ω m·ªôt monster ƒë∆°n l·∫ª t·∫°i v·ªã tr√≠ c·ª• th·ªÉ
     */
    private fun drawSingleMonster(canvas: Canvas, monster: Monster, x: Float, y: Float, tileSize: Int) {
        // 1Ô∏è‚É£ KH√îNG v·∫Ω floor tile - ƒë·ªÉ monster blend tr·ª±c ti·∫øp v·ªõi n·ªÅn ƒë√£ c√≥
        // Floor tile ƒë√£ ƒë∆∞·ª£c v·∫Ω trong B∆Ø·ªöC 1 c·ªßa drawGameBoard

        // 2Ô∏è‚É£ L·∫•y drawable cho monster
        val monsterDrawable = getMonsterDrawable(monster.type)
        
        // 3Ô∏è‚É£ T√πy ch·ªânh k√≠ch th∆∞·ªõc monster theo constants
        val monsterWidth = (tileSize * MONSTER_WIDTH_RATIO).toInt()   // Chi·ªÅu r·ªông t√πy ch·ªânh
        val monsterHeight = (tileSize * MONSTER_HEIGHT_RATIO).toInt() // Chi·ªÅu cao t√πy ch·ªânh
        
        val monsterBitmap = drawableToBitmapCustomSize(monsterDrawable, monsterWidth, monsterHeight)
        
        // 4Ô∏è‚É£ T√≠nh v·ªã tr√≠ center ƒë·ªÉ monster kh√¥ng b·ªã l·ªách
        val centerOffsetX = (tileSize - monsterWidth) / 2f
        val drawX = x + centerOffsetX

        // 5Ô∏è‚É£ T·∫°m th·ªùi t·∫Øt shadow ƒë·ªÉ test monster ho√†n to√†n trong su·ªët
        // TODO: C√≥ th·ªÉ b·∫≠t l·∫°i sau khi ƒë√£ test
        /*
        canvas.drawRect(drawX + 2, y + 2, drawX + monsterWidth + 2, y + monsterHeight + 2, shadowPaint)
        */

        // 6Ô∏è‚É£ V·∫Ω monster v·ªõi alpha transparency
        canvas.drawBitmap(monsterBitmap, drawX, y, monsterPaint)
    }

    /**
     * üëπ V·∫Ω t·∫•t c·∫£ monsters l√™n canvas (method c≈© - gi·ªØ l·∫°i ƒë·ªÉ t∆∞∆°ng th√≠ch)
     */
    private fun drawMonsters(canvas: Canvas, monsters: List<Monster>, tileSize: Int, offsetX: Float, offsetY: Float) {
        monsters.forEach { monster ->
            if (monster.isActive) {
                // üÜï Effect cho monster b·ªã stun
                if (monster.isStunned()) {
                    // V·∫Ω hi·ªáu ·ª©ng stun (v√≤ng tr√≤n t√≠m xung quanh)
                    val stunPaint = Paint().apply {
                        color = Color.MAGENTA
                        style = Paint.Style.STROKE
                        strokeWidth = 3f
                        alpha = 180
                    }
                    val stunRadius = tileSize * 0.6f
                    val stunX = offsetX + monster.currentY * tileSize.toFloat()
                    val stunY = offsetY + monster.currentX * tileSize.toFloat()
                    canvas.drawCircle(stunX, stunY, stunRadius, stunPaint)
                }

                // 1Ô∏è‚É£ L·∫•y drawable cho monster
                val monsterDrawable = getMonsterDrawable(monster.type)
                
                // 2Ô∏è‚É£ T√≠nh v·ªã tr√≠ render (smooth position)
                val x = offsetX + monster.currentY * tileSize.toFloat()  // currentY l√† column
                val y = offsetY + monster.currentX * tileSize.toFloat()  // currentX l√† row

                // 3Ô∏è‚É£ T√πy ch·ªânh k√≠ch th∆∞·ªõc monster theo constants
                val monsterWidth = (tileSize * MONSTER_WIDTH_RATIO).toInt()   // Chi·ªÅu r·ªông t√πy ch·ªânh
                val monsterHeight = (tileSize * MONSTER_HEIGHT_RATIO).toInt() // Chi·ªÅu cao t√πy ch·ªânh
                
                val monsterBitmap = drawableToBitmapCustomSize(monsterDrawable, monsterWidth, monsterHeight)
                
                // 4Ô∏è‚É£ T√≠nh v·ªã tr√≠ center ƒë·ªÉ monster kh√¥ng b·ªã l·ªách
                val centerOffsetX = (tileSize - monsterWidth) / 2f
                val drawX = x + centerOffsetX

                // 5Ô∏è‚É£ V·∫Ω shadow
                canvas.drawRect(drawX + 2, y + 2, drawX + monsterWidth + 2, y + monsterHeight + 2, shadowPaint)

                // 6Ô∏è‚É£ V·∫Ω monster v·ªõi alpha transparency
                canvas.drawBitmap(monsterBitmap, drawX, y, monsterPaint)

            }
        }
    }
    
    fun drawGameUI(canvas: Canvas) {
        // V·∫Ω ti√™u ƒë·ªÅ game
        canvas.drawText("Sokoban Game", screenWidth / 2f, 120f, textPaint)

        // V·∫Ω h∆∞·ªõng d·∫´n
        val instructionsPaint = Paint().apply {
            textSize = 40f
            color = Color.LTGRAY
            textAlign = Paint.Align.CENTER
        }
        canvas.drawText(
            "Vu·ªët ƒë·ªÉ di chuy·ªÉn - ƒê·∫©y h·ªôp v√†o m·ª•c ti√™u", 
            screenWidth / 2f, 
            screenHeight - 60f, 
            instructionsPaint
        )
    }

    /**
     * üéØ V·∫Ω t·∫•t c·∫£ bullets l√™n canvas
     *
     * @param canvas Canvas ƒë·ªÉ v·∫Ω
     * @param bullets Danh s√°ch bullets c·∫ßn v·∫Ω
     */
    fun drawBullets(canvas: Canvas, bullets: List<Bullet>) {
        bullets.forEach { bullet ->
            if (bullet.isActive) {
                // üéØ L·∫•y drawable theo h∆∞·ªõng c·ªßa bullet (c√πng cho c·∫£ normal v√† pierce)
                val bulletDrawable = getBulletDrawable(bullet.direction)

                bulletDrawable?.let { drawable ->
                    // V·∫Ω bullet t·∫°i v·ªã tr√≠ hi·ªán t·∫°i v·ªõi scale b·∫±ng c√°ch set bounds
                    val bulletSize = 64 * bullet.scale
                    val halfSize = bulletSize / 2
                    val left = (bullet.currentX - halfSize).toInt()
                    val top = (bullet.currentY - halfSize).toInt()
                    val right = (bullet.currentX + halfSize).toInt()
                    val bottom = (bullet.currentY + halfSize).toInt()

                    drawable.setBounds(left, top, right, bottom)
                    drawable.draw(canvas)
                }

                // V·∫Ω trail effect theo lo·∫°i bullet
                val trailColor = when (bullet.bulletType) {
                    BulletType.NORMAL -> android.graphics.Color.YELLOW
                    BulletType.PIERCE -> android.graphics.Color.CYAN
                    BulletType.STUN -> android.graphics.Color.MAGENTA
                }

                val trailPaint = Paint().apply {
                    color = trailColor
                    alpha = 150  // TƒÉng ƒë·ªô trong su·ªët
                }
                canvas.drawCircle(bullet.currentX, bullet.currentY, 5f, trailPaint)
            }
        }
    }
    
    private fun drawableToBitmap(drawable: Drawable, size: Int): Bitmap {
        val bitmap = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888)
        val canvas = Canvas(bitmap)
        
        // X√≥a ho√†n to√†n n·ªÅn - ƒë·∫£m b·∫£o trong su·ªët 100%
        canvas.drawColor(Color.TRANSPARENT, android.graphics.PorterDuff.Mode.CLEAR)
        
        drawable.setBounds(0, 0, size, size)
        drawable.draw(canvas)
        return bitmap
    }

    /**
     * üé® T·∫°o bitmap v·ªõi k√≠ch th∆∞·ªõc custom (width ‚â† height)
     * @param drawable Drawable c·∫ßn chuy·ªÉn ƒë·ªïi
     * @param width Chi·ªÅu r·ªông mong mu·ªën
     * @param height Chi·ªÅu cao mong mu·ªën
     */
    private fun drawableToBitmapCustomSize(drawable: Drawable, width: Int, height: Int): Bitmap {
        val bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)
        val canvas = Canvas(bitmap)
        
        // ƒê·∫£m b·∫£o n·ªÅn ho√†n to√†n trong su·ªët v·ªõi nhi·ªÅu method
        canvas.drawColor(Color.TRANSPARENT, android.graphics.PorterDuff.Mode.CLEAR)
        
        // T·∫°o Paint ƒë·∫∑c bi·ªát cho drawable
        val drawablePaint = Paint().apply {
            isAntiAlias = true
            isFilterBitmap = true
            isDither = true
        }
        
        drawable.setBounds(0, 0, width, height)
        drawable.draw(canvas)
        return bitmap
    }

    /**
     * üéõÔ∏è V·∫Ω c√°c n√∫t toggle nh·∫°c/sound ph√≠a tr√™n map
     */
    fun drawToggleButtons(canvas: Canvas, map: Array<CharArray>, 
                         musicEnabled: Boolean, soundEnabled: Boolean) {
        if (map.isEmpty() || map[0].isEmpty()) return

        // T√≠nh v·ªã tr√≠ c√°c n√∫t ph√≠a tr√™n map
        val tileSize = min(screenWidth / map[0].size, screenHeight / map.size)
        val boardWidth = map[0].size * tileSize
        val boardHeight = map.size * tileSize
        val offsetX = (screenWidth - boardWidth) / 2f
        val offsetY = (screenHeight - boardHeight) / 2f

        // V·ªã tr√≠ n√∫t: ph√≠a tr√™n map, c√°ch top 20px
        val buttonY = offsetY - 140f  // TƒÉng kho·∫£ng c√°ch ƒë·ªÉ n√∫t l·ªõn h∆°n kh√¥ng b·ªã che
        val buttonSize = 120f         // TƒÉng k√≠ch th∆∞·ªõc n√∫t t·ª´ 80f l√™n 120f
        
        // N√∫t tr√°i: Toggle Music (b√™n tr√°i m√†n h√¨nh)
        val musicButtonX = 20f
        val musicIcon = if (musicEnabled) musicOnIcon else musicOffIcon
        drawToggleButton(canvas, musicIcon, musicButtonX, buttonY, buttonSize)
        
        // N√∫t ph·∫£i: Toggle Sound (b√™n ph·∫£i m√†n h√¨nh) 
        val soundButtonX = screenWidth - buttonSize - 20f
        val soundIcon = if (soundEnabled) soundOnIcon else soundOffIcon
        drawToggleButton(canvas, soundIcon, soundButtonX, buttonY, buttonSize)
    }

    /**
     * üé® V·∫Ω m·ªôt n√∫t toggle ƒë∆°n l·∫ª
     */
    private fun drawToggleButton(canvas: Canvas, icon: Drawable, x: Float, y: Float, size: Float) {
        // 1Ô∏è‚É£ V·∫Ω shadow tr∆∞·ªõc (ph√≠a sau n√∫t)
        val shadowPaint = Paint().apply {
            color = Color.argb(120, 0, 0, 0)  // Shadow ƒëen nh·∫°t
            style = Paint.Style.FILL
        }
        canvas.drawRoundRect(x + 4, y + 4, x + size + 4, y + size + 4, 15f, 15f, shadowPaint)
        
        // 2Ô∏è‚É£ V·∫Ω background tr·∫Øng cho n√∫t ƒë·ªÉ d·ªÖ nh√¨n
        val buttonPaint = Paint().apply {
            color = Color.WHITE  // N·ªÅn tr·∫Øng
            style = Paint.Style.FILL
        }
        canvas.drawRoundRect(x, y, x + size, y + size, 15f, 15f, buttonPaint)
        
        // 3Ô∏è‚É£ V·∫Ω icon v·ªõi padding
        val iconPadding = size * 0.15f  // 15% padding
        val iconLeft = x + iconPadding
        val iconTop = y + iconPadding
        val iconRight = x + size - iconPadding
        val iconBottom = y + size - iconPadding
        
        icon.setBounds(iconLeft.toInt(), iconTop.toInt(), iconRight.toInt(), iconBottom.toInt())
        icon.draw(canvas)
        
        // 4Ô∏è‚É£ V·∫Ω border x√°m ƒë·∫≠m cho contrast
        val borderPaint = Paint().apply {
            color = Color.DKGRAY  // Vi·ªÅn x√°m ƒë·∫≠m
            style = Paint.Style.STROKE
            strokeWidth = 4f      // Vi·ªÅn d√†y h∆°n cho n√∫t l·ªõn
        }
        canvas.drawRoundRect(x, y, x + size, y + size, 15f, 15f, borderPaint)
    }
    
    fun getTileDrawable(tile: Char): Drawable {
        return when (tile) {
            '#' -> wall
            'B' -> box
            'G' -> goal
            else -> floor
        }
    }
    
    fun calculateTileSize(map: Array<CharArray>): Int {
        if (map.isEmpty() || map[0].isEmpty()) return 0
        return min(screenWidth / map[0].size, screenHeight / map.size)
    }
    
    fun calculateBoardOffset(map: Array<CharArray>): Pair<Float, Float> {
        if (map.isEmpty() || map[0].isEmpty()) return Pair(0f, 0f)
        
        val tileSize = calculateTileSize(map)
        val boardWidth = map[0].size * tileSize
        val boardHeight = map.size * tileSize
        val offsetX = (screenWidth - boardWidth) / 2f
        val offsetY = (screenHeight - boardHeight) / 2f
        
        return Pair(offsetX, offsetY)
    }

    fun drawAmmoUI(canvas: Canvas, normalAmmo: Int, pierceAmmo: Int, screenWidth: Float, screenHeight: Float) {
        val maxAmmoPerType = 5

        // üÜï NORMAL AMMO UI (h√†ng tr√™n)
        val normalRect = RectF(
            screenWidth - 180f,  // B√™n ph·∫£i m√†n h√¨nh
            220f,                 // V·ªã tr√≠ Y
            screenWidth - 40f,    // C√°ch l·ªÅ ph·∫£i 40px
            280f                  // Chi·ªÅu cao
        )

        // V·∫Ω n·ªÅn cho normal ammo
        val normalUiPaint = Paint().apply {
            color = Color.parseColor("#DD333333")  // N·ªÅn ƒë·ªè
            style = Paint.Style.FILL
        }
        canvas.drawRoundRect(normalRect, 15f, 15f, normalUiPaint)

        // V·∫Ω vi·ªÅn v√†ng
        val borderPaint = Paint().apply {
            color = Color.YELLOW
            style = Paint.Style.STROKE
            strokeWidth = 3f
        }
        canvas.drawRoundRect(normalRect, 15f, 15f, borderPaint)

        // V·∫Ω text cho normal ammo
        val textPaint = Paint().apply {
            color = Color.WHITE
            textSize = 28f
            textAlign = Paint.Align.LEFT
            isAntiAlias = true
            style = Paint.Style.FILL_AND_STROKE
            strokeWidth = 1f
        }

        // V·∫Ω icon normal ammo
        itemBullet?.let { drawable ->
            val bulletSize = 28f
            val iconLeft = normalRect.left + 8f
            val iconTop = normalRect.centerY() - bulletSize / 2
            drawable.setBounds(
                iconLeft.toInt(),
                iconTop.toInt(),
                (iconLeft + bulletSize).toInt(),
                (iconTop + bulletSize).toInt()
            )
            drawable.draw(canvas)
        }

        // V·∫Ω s·ªë l∆∞·ª£ng normal ammo
        val textX = normalRect.left + 44f
        val textY = normalRect.centerY() + 8f
        canvas.drawText("$normalAmmo/$maxAmmoPerType", textX, textY, textPaint)

        // üÜï PIERCE AMMO UI (h√†ng d∆∞·ªõi)
        val pierceRect = RectF(
            screenWidth - 180f,  // B√™n ph·∫£i m√†n h√¨nh
            290f,                 // D∆∞·ªõi normal ammo
            screenWidth - 40f,    // C√°ch l·ªÅ ph·∫£i 40px
            350f                  // Chi·ªÅu cao
        )

        // V·∫Ω n·ªÅn cho pierce ammo (m√†u xanh d∆∞∆°ng)
        val pierceUiPaint = Paint().apply {
            color = Color.parseColor("#DD333366")  // N·ªÅn xanh d∆∞∆°ng
            style = Paint.Style.FILL
        }
        canvas.drawRoundRect(pierceRect, 15f, 15f, pierceUiPaint)

        // V·∫Ω vi·ªÅn xanh d∆∞∆°ng
        val pierceBorderPaint = Paint().apply {
            color = Color.CYAN
            style = Paint.Style.STROKE
            strokeWidth = 3f
        }
        canvas.drawRoundRect(pierceRect, 15f, 15f, pierceBorderPaint)

        // V·∫Ω icon pierce ammo
        itemBullet?.let { drawable ->
            val bulletSize = 28f
            val iconLeft = pierceRect.left + 8f
            val iconTop = pierceRect.centerY() - bulletSize / 2
            drawable.setBounds(
                iconLeft.toInt(),
                iconTop.toInt(),
                (iconLeft + bulletSize).toInt(),
                (iconTop + bulletSize).toInt()
            )
            drawable.draw(canvas)
        }

        // V·∫Ω s·ªë l∆∞·ª£ng pierce ammo
        canvas.drawText("$pierceAmmo/$maxAmmoPerType", textX, pierceRect.centerY() + 8f, textPaint)
    }

    // üÜï V·∫º LIVES UI ·ªû GI·ªÆA M√ÄN H√åNH
    fun drawLivesUI(canvas: Canvas, lives: Int, maxLives: Int, screenWidth: Float, screenHeight: Float) {
        // V·∫Ω ·ªü gi·ªØa m√†n h√¨nh, ph√≠a tr√™n ammo buttons
        val uiWidth = 150f
        val uiHeight = 100f
        val uiRect = RectF(
            screenWidth / 2 - uiWidth / 2,  // CƒÉn gi·ªØa ngang
            200f,                           // C√°ch top 250px (th·∫•p xu·ªëng th√™m 100px)
            screenWidth / 2 + uiWidth / 2,  // CƒÉn gi·ªØa ngang
            250f + uiHeight                 // Chi·ªÅu cao
        )

        // V·∫Ω n·ªÅn
        val uiPaint = Paint().apply {
            color = Color.parseColor("#FFFF99")  // N·ªÅn ƒë·ªè cho lives
            style = Paint.Style.FILL
        }
        canvas.drawRoundRect(uiRect, 15f, 15f, uiPaint)

        // V·∫Ω vi·ªÅn
        val borderPaint = Paint().apply {
            color = Color.RED
            style = Paint.Style.STROKE
            strokeWidth = 3f
        }
        canvas.drawRoundRect(uiRect, 15f, 15f, borderPaint)

        // V·∫Ω text
        val textPaint = Paint().apply {
            color = Color.BLACK
            textSize = 62f
            textAlign = Paint.Align.CENTER
            isAntiAlias = true
            style = Paint.Style.FILL_AND_STROKE
            strokeWidth = 2f
        }

        val centerX = uiRect.centerX()
        val centerY = uiRect.centerY() + 8f

        // V·∫Ω "‚ù§Ô∏è" emoji
        val shadowPaint = Paint().apply {
            color = Color.BLACK
            textSize = 50f
            textAlign = Paint.Align.CENTER
            isAntiAlias = true
            style = Paint.Style.FILL_AND_STROKE
            strokeWidth = 1f
        }
        canvas.drawText("‚ù§Ô∏è", centerX + 1f, centerY + 1f, shadowPaint)
        canvas.drawText("‚ù§Ô∏è", centerX, centerY, textPaint)

        // V·∫Ω s·ªë lives
        val numberPaint = Paint().apply {
            color = Color.BLACK
            textSize = 40f
            textAlign = Paint.Align.CENTER
            isAntiAlias = true
            style = Paint.Style.FILL_AND_STROKE
            strokeWidth = 1f
        }
        canvas.drawText("$lives/$maxLives", centerX, centerY + 50f, numberPaint)
    }

    // üÜï V·∫º N√öT CH·ªåN LO·∫†I ƒê·∫†N ·ªû PH√çA D∆Ø·ªöI (to v√† d·ªÖ ·∫•n)
    fun drawBulletTypeButtons(canvas: Canvas, normalAmmo: Int, pierceAmmo: Int, stunAmmo: Int, screenWidth: Float, screenHeight: Float, selectedType: BulletType, buildMode: Boolean) {
        val buttonWidth = 150f  // Gi·∫£m k√≠ch th∆∞·ªõc cho 3 n√∫t
        val buttonHeight = 120f
        val buttonSpacing = 20f
        val bottomMargin = 150f

        // N√∫t normal ammo (b√™n tr√°i)
        val normalButtonRect = RectF(
            screenWidth / 2 - buttonWidth * 1.5f - buttonSpacing,
            screenHeight - buttonHeight - bottomMargin,
            screenWidth / 2 - buttonWidth * 0.5f - buttonSpacing / 2,
            screenHeight - bottomMargin
        )

        // N√∫t pierce ammo (gi·ªØa)
        val pierceButtonRect = RectF(
            screenWidth / 2 - buttonWidth * 0.5f,
            screenHeight - buttonHeight - bottomMargin,
            screenWidth / 2 + buttonWidth * 0.5f,
            screenHeight - bottomMargin
        )

        // N√∫t stun ammo (b√™n ph·∫£i)
        val stunButtonRect = RectF(
            screenWidth / 2 + buttonWidth * 0.5f + buttonSpacing / 2,
            screenHeight - buttonHeight - bottomMargin,
            screenWidth / 2 + buttonWidth * 1.5f + buttonSpacing,
            screenHeight - bottomMargin
        )

        // N√∫t build wall (c·∫°nh b√™n ph·∫£i stun)
        val buildButtonRect = RectF(
            screenWidth / 2 + buttonWidth * 1.5f + buttonSpacing * 1.5f,
            screenHeight - buttonHeight - bottomMargin,
            screenWidth / 2 + buttonWidth * 2.5f + buttonSpacing * 2,
            screenHeight - bottomMargin
        )

        val buttonPaint = Paint().apply { style = Paint.Style.FILL }
        val borderPaint = Paint().apply { style = Paint.Style.STROKE; strokeWidth = 4f } // üÜï TƒÉng border t·ª´ 3f l√™n 4f
        val textPaint = Paint().apply {
            color = Color.WHITE
            textSize = 48f  // üÜï TƒÉng t·ª´ 24f l√™n 32f
            textAlign = Paint.Align.CENTER
            isAntiAlias = true
        }

        // V·∫Ω n√∫t normal ammo
        buttonPaint.color = if (selectedType == BulletType.NORMAL) Color.parseColor("#FF6B35") else Color.parseColor("#DD333333")
        borderPaint.color = if (selectedType == BulletType.NORMAL) Color.YELLOW else Color.GRAY
        canvas.drawRoundRect(normalButtonRect, 10f, 10f, buttonPaint)
        canvas.drawRoundRect(normalButtonRect, 10f, 10f, borderPaint)

        // V·∫Ω icon normal ammo
        itemBullet?.let { drawable ->
            val iconSize = 62f  // üÜï TƒÉng t·ª´ 32f l√™n 50f
            val iconLeft = normalButtonRect.left + 15f  // üÜï TƒÉng margin t·ª´ 10f l√™n 15f
            val iconTop = normalButtonRect.centerY() - iconSize / 2
            drawable.setBounds(
                iconLeft.toInt(),
                iconTop.toInt(),
                (iconLeft + iconSize).toInt(),
                (iconTop + iconSize).toInt()
            )
            drawable.draw(canvas)
        }

        // V·∫Ω s·ªë l∆∞·ª£ng normal ammo
        canvas.drawText(
            "$normalAmmo",
            normalButtonRect.centerX() + 25f,  // üÜï TƒÉng t·ª´ 15f l√™n 25f
            normalButtonRect.centerY() + 10f,  // üÜï TƒÉng t·ª´ 8f l√™n 10f
            textPaint
        )

        // V·∫Ω n√∫t pierce ammo
        buttonPaint.color = if (selectedType == BulletType.PIERCE) Color.parseColor("#4A90E2") else Color.parseColor("#DD333366")
        borderPaint.color = if (selectedType == BulletType.PIERCE) Color.CYAN else Color.GRAY
        canvas.drawRoundRect(pierceButtonRect, 10f, 10f, buttonPaint)
        canvas.drawRoundRect(pierceButtonRect, 10f, 10f, borderPaint)

        // V·∫Ω icon pierce ammo (d√πng rocket)
        rocket?.let { drawable ->
            val iconSize = 62f  // üÜï TƒÉng t·ª´ 32f l√™n 50f
            val iconLeft = pierceButtonRect.left + 15f  // üÜï TƒÉng margin t·ª´ 10f l√™n 15f
            val iconTop = pierceButtonRect.centerY() - iconSize / 2
            drawable.setBounds(
                iconLeft.toInt(),
                iconTop.toInt(),
                (iconLeft + iconSize).toInt(),
                (iconTop + iconSize).toInt()
            )
            drawable.draw(canvas)
        }

        // V·∫Ω s·ªë l∆∞·ª£ng pierce ammo
        canvas.drawText(
            "$pierceAmmo",
            pierceButtonRect.centerX() + 15f,
            pierceButtonRect.centerY() + 10f,
            textPaint
        )

        // V·∫Ω n√∫t stun ammo
        buttonPaint.color = if (selectedType == BulletType.STUN) Color.parseColor("#9933FF") else Color.parseColor("#DD6600CC")  // M√†u t√≠m cho stun
        borderPaint.color = if (selectedType == BulletType.STUN) Color.MAGENTA else Color.GRAY
        canvas.drawRoundRect(stunButtonRect, 10f, 10f, buttonPaint)
        canvas.drawRoundRect(stunButtonRect, 10f, 10f, borderPaint)

        // V·∫Ω icon stun ammo (‚ö°) ·ªü b√™n tr√°i
        val stunIconPaint = Paint().apply {
            color = Color.WHITE
            textSize = 52f
            textAlign = Paint.Align.LEFT
            isAntiAlias = true
            style = Paint.Style.FILL_AND_STROKE
            strokeWidth = 2f
        }
        canvas.drawText(
            "‚ö°",
            stunButtonRect.left + 30f,
            stunButtonRect.centerY() + 10f,
            stunIconPaint
        )

        // V·∫Ω s·ªë l∆∞·ª£ng stun ammo ·ªü b√™n ph·∫£i (c√πng d√≤ng)
        val stunNumberPaint = Paint().apply {
            color = Color.WHITE
            textSize = 48f
            textAlign = Paint.Align.RIGHT
            isAntiAlias = true
            style = Paint.Style.FILL_AND_STROKE
            strokeWidth = 1f
        }
        canvas.drawText(
            "$stunAmmo",
            stunButtonRect.right - 40f,
            stunButtonRect.centerY() + 10f,
            stunNumberPaint
        )

        // V·∫Ω n√∫t build wall
        buttonPaint.color = if (buildMode) Color.parseColor("#FF6600") else Color.parseColor("#DD444444")  // M√†u cam cho build
        borderPaint.color = if (buildMode) Color.parseColor("#FFAA00") else Color.GRAY
        canvas.drawRoundRect(buildButtonRect, 10f, 10f, buttonPaint)
        canvas.drawRoundRect(buildButtonRect, 10f, 10f, borderPaint)

        // V·∫Ω icon build wall (üß± ho·∫∑c wall symbol)
        val buildIconPaint = Paint().apply {
            color = Color.WHITE
            textSize = 32f
            textAlign = Paint.Align.CENTER
            isAntiAlias = true
            style = Paint.Style.FILL_AND_STROKE
            strokeWidth = 2f
        }
        canvas.drawText(
            "üß±",
            buildButtonRect.centerX(),
            buildButtonRect.centerY() + 10f,
            buildIconPaint
        )
    }

    // üÜï V·∫º LIVES PICKUPS TR√äN MAP
    fun drawLivesPickups(canvas: Canvas, livesPickups: List<LivesPickup>, tileSize: Float, offsetX: Float, offsetY: Float) {
        livesPickups.forEach { lives ->
            val (screenX, screenY) = lives.getScreenPosition(tileSize, offsetX, offsetY)

            // V·∫Ω n·ªÅn tim ƒë·ªè
            val backgroundPaint = Paint().apply {
                color = Color.RED
                style = Paint.Style.FILL
            }
            val backgroundSize = tileSize * 0.6f
            val backgroundRect = RectF(
                screenX - backgroundSize / 2,
                screenY - backgroundSize / 2,
                screenX + backgroundSize / 2,
                screenY + backgroundSize / 2
            )
            canvas.drawRoundRect(backgroundRect, backgroundSize * 0.2f, backgroundSize * 0.2f, backgroundPaint)

            // V·∫Ω vi·ªÅn v√†ng
            val borderPaint = Paint().apply {
                color = Color.YELLOW
                style = Paint.Style.STROKE
                strokeWidth = 2f
            }
            canvas.drawRoundRect(backgroundRect, backgroundSize * 0.2f, backgroundSize * 0.2f, borderPaint)

            // V·∫Ω text "‚ù§Ô∏è" nh·ªè
            val textPaint = Paint().apply {
                color = Color.WHITE
                textSize = tileSize * 0.4f
                textAlign = Paint.Align.CENTER
                isAntiAlias = true
                style = Paint.Style.FILL_AND_STROKE
                strokeWidth = 1f
            }
            canvas.drawText("‚ù§Ô∏è", screenX, screenY + textPaint.textSize * 0.3f, textPaint)
        }
    }

    // Th√™m method v·∫Ω ammo pickups:

    fun drawAmmoPickups(canvas: Canvas, ammoPickups: List<AmmoPickup>, tileSize: Float, offsetX: Float, offsetY: Float) {
        ammoPickups.forEach { ammo ->
            val (screenX, screenY) = ammo.getScreenPosition(tileSize, offsetX, offsetY)

            // V·∫Ω n·ªÅn tr·∫Øng vu√¥ng
            val backgroundPaint = Paint().apply {
                color = Color.WHITE
                style = Paint.Style.FILL
            }
            val backgroundSize = tileSize * 0.6f
            val backgroundRect = RectF(
                screenX - backgroundSize / 2,
                screenY - backgroundSize / 2,
                screenX + backgroundSize / 2,
                screenY + backgroundSize / 2
            )
            canvas.drawRect(backgroundRect, backgroundPaint)

            // V·∫Ω vi·ªÅn v·ªõi m√†u kh√°c nhau theo type
            val borderColor = when (ammo.ammoType) {
                AmmoType.NORMAL -> Color.BLACK
                AmmoType.PIERCE -> Color.CYAN
                AmmoType.STUN -> Color.MAGENTA  // T√≠m cho stun ammo
            }
            val borderPaint = Paint().apply {
                color = borderColor
                style = Paint.Style.STROKE
                strokeWidth = 2f
            }
            canvas.drawRect(backgroundRect, borderPaint)

            // V·∫Ω h√¨nh ammo theo type - normal d√πng item_bullet, pierce d√πng rocket, stun d√πng item_bullet v·ªõi border kh√°c
            val ammoDrawable = when (ammo.ammoType) {
                AmmoType.NORMAL -> itemBullet
                AmmoType.PIERCE -> rocket
                AmmoType.STUN -> itemBullet  // STUN d√πng item_bullet nh∆∞ng border kh√°c
            }

            ammoDrawable?.let { drawable ->
                val ammoSize = tileSize * 0.4f
                val left = (screenX - ammoSize / 2).toInt()
                val top = (screenY - ammoSize / 2).toInt()
                val right = (screenX + ammoSize / 2).toInt()
                val bottom = (screenY + ammoSize / 2).toInt()

                drawable.setBounds(left, top, right, bottom)
                drawable.draw(canvas)
            }
        }
    }
}
