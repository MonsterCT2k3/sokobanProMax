package com.example.myapplication.rendering

import android.content.Context
import android.graphics.Bitmap
import android.graphics.Canvas
import android.graphics.Color
import android.graphics.Paint
import android.graphics.Typeface
import android.graphics.drawable.Drawable
import androidx.core.content.ContextCompat
import com.example.myapplication.R
import com.example.myapplication.entities.Bullet
import com.example.myapplication.entities.BulletDirection
import com.example.myapplication.game.PlayerDirection
import kotlin.math.min
import com.example.myapplication.entities.Monster
import com.example.myapplication.entities.MonsterType

class GameRenderer(private val context: Context) {
    
    // Monster size constants - d·ªÖ d√†ng ƒëi·ªÅu ch·ªânh
    companion object {
        private const val MONSTER_WIDTH_RATIO = 1.0f   // 70% chi·ªÅu r·ªông tile
        private const val MONSTER_HEIGHT_RATIO = 1.0f  // 100% chi·ªÅu cao tile (gi·ªØ nguy√™n)
    }
    
    // Drawable resources
    private lateinit var wall: Drawable
    private lateinit var box: Drawable
    private lateinit var goal: Drawable
    private lateinit var floor: Drawable
    private lateinit var playerUp: Drawable
    private lateinit var playerDown: Drawable
    private lateinit var playerLeft: Drawable
    private lateinit var playerRight: Drawable
    private lateinit var monsterPatrol: Drawable
    private lateinit var monsterStraight: Drawable
    private lateinit var bulletUp: Drawable
    private lateinit var bulletDown: Drawable
    private lateinit var bulletLeft: Drawable
    private lateinit var bulletRight: Drawable
    
    // Paint objects
    private lateinit var tilePaint: Paint
    private lateinit var textPaint: Paint
    private lateinit var shadowPaint: Paint
    private lateinit var monsterPaint: Paint
    
    // Cached bitmaps for performance
    private var cachedBitmaps: Map<Char, Bitmap>? = null
    private var cachedTileSize: Int = 0
    
    // Screen dimensions
    private var screenWidth = 0
    private var screenHeight = 0
    
    init {
        initResources()
        initPaints()
    }
    
    private fun initResources() {
        wall = ContextCompat.getDrawable(context, R.drawable.wall)
            ?: throw IllegalStateException("wall drawable not found")
        box = ContextCompat.getDrawable(context, R.drawable.box)
            ?: throw IllegalStateException("box drawable not found")
        goal = ContextCompat.getDrawable(context, R.drawable.goal)
            ?: throw IllegalStateException("goal drawable not found")
        playerUp = ContextCompat.getDrawable(context, R.drawable.hero_up)
            ?: throw IllegalStateException("player drawable not found")
        playerDown = ContextCompat.getDrawable(context, R.drawable.hero_down)
            ?: throw IllegalStateException("player drawable not found")
        playerLeft = ContextCompat.getDrawable(context, R.drawable.hero_left)
            ?: throw IllegalStateException("player drawable not found")
        playerRight = ContextCompat.getDrawable(context, R.drawable.hero_right)
            ?: throw IllegalStateException("player drawable not found")
        floor = ContextCompat.getDrawable(context, R.drawable.floor)
            ?: throw IllegalStateException("floor drawable not found")
        monsterPatrol = ContextCompat.getDrawable(context, R.drawable.monster_patrol)
            ?: throw IllegalStateException("monster drawable not found")
        monsterStraight = ContextCompat.getDrawable(context, R.drawable.zombie)
            ?: throw IllegalStateException("monster drawable not found")

        // Load bullet drawables for each direction
        bulletUp = ContextCompat.getDrawable(context, R.drawable.bullet_up)
            ?: throw IllegalStateException("bullet_up drawable not found")
        bulletDown = ContextCompat.getDrawable(context, R.drawable.bullet_down)
            ?: throw IllegalStateException("bullet_down drawable not found")
        bulletLeft = ContextCompat.getDrawable(context, R.drawable.bullet_left)
            ?: throw IllegalStateException("bullet_left drawable not found")
        bulletRight = ContextCompat.getDrawable(context, R.drawable.bullet_right)
            ?: throw IllegalStateException("bullet_right drawable not found")
    }

    /**
     * üëπ L·∫•y drawable cho monster theo type
     */
    private fun getMonsterDrawable(type: MonsterType): Drawable {
        return when (type) {
            MonsterType.PATROL -> monsterPatrol
            MonsterType.CIRCLE -> monsterPatrol  // T·∫°m d√πng chung
            MonsterType.RANDOM -> monsterPatrol  // T·∫°m d√πng chung
            MonsterType.CHASE -> monsterPatrol   // T·∫°m d√πng chung
            MonsterType.STRAIGHT -> monsterStraight
            MonsterType.BOUNCE -> monsterStraight  // T·∫°m d√πng zombie sprite cho bounce
        }
    }

    /**
     * üéØ L·∫•y drawable cho bullet theo h∆∞·ªõng
     */
    private fun getBulletDrawable(direction: BulletDirection): Drawable {
        return when (direction) {
            BulletDirection.UP -> bulletUp
            BulletDirection.DOWN -> bulletDown
            BulletDirection.LEFT -> bulletLeft
            BulletDirection.RIGHT -> bulletRight
        }
    }

    // Th√™m method m·ªõi v√†o GameRenderer:
    private fun getCurrentPlayerDrawable(direction: PlayerDirection): Drawable {
        return when (direction) {
            PlayerDirection.UP -> playerUp
            PlayerDirection.DOWN -> playerDown
            PlayerDirection.LEFT -> playerLeft
            PlayerDirection.RIGHT -> playerRight
        }
    }
    
    private fun initPaints() {
        tilePaint = Paint().apply {
            isAntiAlias = true
            isFilterBitmap = true
        }

        textPaint = Paint().apply {
            color = Color.WHITE
            textSize = 48f
            typeface = Typeface.DEFAULT_BOLD
            isAntiAlias = true
            textAlign = Paint.Align.CENTER
        }

        shadowPaint = Paint().apply {
            color = Color.BLACK
            alpha = 80
        }

        monsterPaint = Paint().apply {
            isAntiAlias = true
            isFilterBitmap = true
            alpha = 255
            // T·ªëi ∆∞u cho transparency ho√†n h·∫£o
            isDither = true
            // V·ªÅ l·∫°i SRC_OVER v·ªõi settings t·ªëi ∆∞u
            xfermode = null  // SRC_OVER default - t·ªët nh·∫•t cho PNG v·ªõi alpha
        }
    }
    
    fun setScreenSize(width: Int, height: Int) {
        screenWidth = width
        screenHeight = height
    }
    
    fun drawGameBoard(canvas: Canvas, map: Array<CharArray>, playerDirection: PlayerDirection, monsters: List<Monster>) {
        if (map.isEmpty() || map[0].isEmpty()) return

        val tileSize = min(screenWidth / map[0].size, screenHeight / map.size)

        // Update cached bitmaps if needed
        if (cachedBitmaps == null || cachedTileSize != tileSize) {
            cachedTileSize = tileSize
            cachedBitmaps = mapOf(
                '#' to drawableToBitmap(wall, tileSize),
                'B' to drawableToBitmap(box, tileSize),
                'G' to drawableToBitmap(goal, tileSize),
                '.' to drawableToBitmap(floor, tileSize)
            )
        }
        val bitmaps = cachedBitmaps!!

        // T√≠nh to√°n ƒë·ªÉ center game board
        val boardWidth = map[0].size * tileSize
        val boardHeight = map.size * tileSize
        val offsetX = (screenWidth - boardWidth) / 2f
        val offsetY = (screenHeight - boardHeight) / 2f

        // B∆Ø·ªöC 1: V·∫Ω t·∫•t c·∫£ tiles tr∆∞·ªõc (n·ªÅn, t∆∞·ªùng, h·ªôp, m·ª•c ti√™u)
        for (i in map.indices) {
            for (j in map[i].indices) {
                val x = offsetX + j * tileSize.toFloat()
                val y = offsetY + i * tileSize.toFloat()

                // V·∫Ω b√≥ng cho non-floor tiles
                if (map[i][j] != '.') {
                    canvas.drawRect(x + 3, y + 3, x + tileSize + 3, y + tileSize + 3, shadowPaint)
                }

                // V·∫Ω tile (t∆∞·ªùng, h·ªôp, m·ª•c ti√™u, s√†n)
                val bitmap = bitmaps[map[i][j]] ?: bitmaps['.']!!
                canvas.drawBitmap(bitmap, x, y, tilePaint)
            }
        }

        // B∆Ø·ªöC 2: V·∫Ω entities (player + monsters) theo th·ª© t·ª± depth (Y-coordinate)
        drawEntitiesWithDepthSort(canvas, map, monsters, playerDirection, tileSize, offsetX, offsetY)
    }

    /**
     * üé≠ V·∫Ω t·∫•t c·∫£ entities (player + monsters) theo th·ª© t·ª± depth sorting
     * Entities ·ªü ph√≠a d∆∞·ªõi (Y l·ªõn h∆°n) s·∫Ω ƒë∆∞·ª£c v·∫Ω sau ƒë·ªÉ che entities ·ªü ph√≠a tr√™n
     */
    private fun drawEntitiesWithDepthSort(canvas: Canvas, map: Array<CharArray>, monsters: List<Monster>, 
                                        playerDirection: PlayerDirection, tileSize: Int, offsetX: Float, offsetY: Float) {
        
        // 1Ô∏è‚É£ T·∫°o danh s√°ch t·∫•t c·∫£ entities v·ªõi th√¥ng tin depth
        data class EntityToDraw(
            val type: String,  // "player" ho·∫∑c "monster"
            val x: Float,
            val y: Float, 
            val depth: Int,    // Y-coordinate cho sorting (row index)
            val monster: Monster? = null
        )
        
        val entitiesToDraw = mutableListOf<EntityToDraw>()
        
        // 2Ô∏è‚É£ Th√™m player v√†o danh s√°ch
        for (i in map.indices) {
            for (j in map[i].indices) {
                if (map[i][j] == '@') {
                    val x = offsetX + j * tileSize.toFloat()
                    val y = offsetY + i * tileSize.toFloat()
                    entitiesToDraw.add(EntityToDraw("player", x, y, i))  // i l√† row = depth
                }
            }
        }
        
        // 3Ô∏è‚É£ Th√™m monsters v√†o danh s√°ch
        monsters.forEach { monster ->
            if (monster.isActive) {
                val x = offsetX + monster.currentY * tileSize.toFloat()  // Convert tileSize to Float
                val y = offsetY + monster.currentX * tileSize.toFloat()  // Convert tileSize to Float
                entitiesToDraw.add(EntityToDraw("monster", x, y, monster.currentX.toInt(), monster))  // Convert currentX to Int for depth
            }
        }
        
        // 4Ô∏è‚É£ Sort theo depth (Y-coordinate): entities ·ªü tr√™n v·∫Ω tr∆∞·ªõc, ·ªü d∆∞·ªõi v·∫Ω sau
        entitiesToDraw.sortBy { it.depth }
        
        // 5Ô∏è‚É£ V·∫Ω theo th·ª© t·ª± ƒë√£ sort
        entitiesToDraw.forEach { entity ->
            when (entity.type) {
                "player" -> {
                    val playerDrawable = getCurrentPlayerDrawable(playerDirection)
                    val playerBitmap = drawableToBitmap(playerDrawable, tileSize)
                    canvas.drawBitmap(playerBitmap, entity.x, entity.y, tilePaint)
                }
                "monster" -> {
                    entity.monster?.let { monster ->
                        drawSingleMonster(canvas, monster, entity.x, entity.y, tileSize)
                    }
                }
            }
        }
    }

    /**
     * üëπ V·∫Ω m·ªôt monster ƒë∆°n l·∫ª t·∫°i v·ªã tr√≠ c·ª• th·ªÉ
     */
    private fun drawSingleMonster(canvas: Canvas, monster: Monster, x: Float, y: Float, tileSize: Int) {
        // 1Ô∏è‚É£ KH√îNG v·∫Ω floor tile - ƒë·ªÉ monster blend tr·ª±c ti·∫øp v·ªõi n·ªÅn ƒë√£ c√≥
        // Floor tile ƒë√£ ƒë∆∞·ª£c v·∫Ω trong B∆Ø·ªöC 1 c·ªßa drawGameBoard

        // 2Ô∏è‚É£ L·∫•y drawable cho monster
        val monsterDrawable = getMonsterDrawable(monster.type)
        
        // 3Ô∏è‚É£ T√πy ch·ªânh k√≠ch th∆∞·ªõc monster theo constants
        val monsterWidth = (tileSize * MONSTER_WIDTH_RATIO).toInt()   // Chi·ªÅu r·ªông t√πy ch·ªânh
        val monsterHeight = (tileSize * MONSTER_HEIGHT_RATIO).toInt() // Chi·ªÅu cao t√πy ch·ªânh
        
        val monsterBitmap = drawableToBitmapCustomSize(monsterDrawable, monsterWidth, monsterHeight)
        
        // 4Ô∏è‚É£ T√≠nh v·ªã tr√≠ center ƒë·ªÉ monster kh√¥ng b·ªã l·ªách
        val centerOffsetX = (tileSize - monsterWidth) / 2f
        val drawX = x + centerOffsetX

        // 5Ô∏è‚É£ T·∫°m th·ªùi t·∫Øt shadow ƒë·ªÉ test monster ho√†n to√†n trong su·ªët
        // TODO: C√≥ th·ªÉ b·∫≠t l·∫°i sau khi ƒë√£ test
        /*
        canvas.drawRect(drawX + 2, y + 2, drawX + monsterWidth + 2, y + monsterHeight + 2, shadowPaint)
        */

        // 6Ô∏è‚É£ V·∫Ω monster v·ªõi alpha transparency
        canvas.drawBitmap(monsterBitmap, drawX, y, monsterPaint)
    }

    /**
     * üëπ V·∫Ω t·∫•t c·∫£ monsters l√™n canvas (method c≈© - gi·ªØ l·∫°i ƒë·ªÉ t∆∞∆°ng th√≠ch)
     */
    private fun drawMonsters(canvas: Canvas, monsters: List<Monster>, tileSize: Int, offsetX: Float, offsetY: Float) {
        monsters.forEach { monster ->
            if (monster.isActive) {
                // 1Ô∏è‚É£ L·∫•y drawable cho monster
                val monsterDrawable = getMonsterDrawable(monster.type)
                
                // 2Ô∏è‚É£ T√≠nh v·ªã tr√≠ render (smooth position)
                val x = offsetX + monster.currentY * tileSize.toFloat()  // currentY l√† column
                val y = offsetY + monster.currentX * tileSize.toFloat()  // currentX l√† row

                // 3Ô∏è‚É£ T√πy ch·ªânh k√≠ch th∆∞·ªõc monster theo constants
                val monsterWidth = (tileSize * MONSTER_WIDTH_RATIO).toInt()   // Chi·ªÅu r·ªông t√πy ch·ªânh
                val monsterHeight = (tileSize * MONSTER_HEIGHT_RATIO).toInt() // Chi·ªÅu cao t√πy ch·ªânh
                
                val monsterBitmap = drawableToBitmapCustomSize(monsterDrawable, monsterWidth, monsterHeight)
                
                // 4Ô∏è‚É£ T√≠nh v·ªã tr√≠ center ƒë·ªÉ monster kh√¥ng b·ªã l·ªách
                val centerOffsetX = (tileSize - monsterWidth) / 2f
                val drawX = x + centerOffsetX

                // 5Ô∏è‚É£ V·∫Ω shadow
                canvas.drawRect(drawX + 2, y + 2, drawX + monsterWidth + 2, y + monsterHeight + 2, shadowPaint)

                // 6Ô∏è‚É£ V·∫Ω monster v·ªõi alpha transparency
                canvas.drawBitmap(monsterBitmap, drawX, y, monsterPaint)

            }
        }
    }
    
    fun drawGameUI(canvas: Canvas) {
        // V·∫Ω ti√™u ƒë·ªÅ game
        canvas.drawText("Sokoban Game", screenWidth / 2f, 120f, textPaint)

        // V·∫Ω h∆∞·ªõng d·∫´n
        val instructionsPaint = Paint().apply {
            textSize = 40f
            color = Color.LTGRAY
            textAlign = Paint.Align.CENTER
        }
        canvas.drawText(
            "Vu·ªët ƒë·ªÉ di chuy·ªÉn - ƒê·∫©y h·ªôp v√†o m·ª•c ti√™u", 
            screenWidth / 2f, 
            screenHeight - 60f, 
            instructionsPaint
        )
    }

    /**
     * üéØ V·∫Ω t·∫•t c·∫£ bullets l√™n canvas
     *
     * @param canvas Canvas ƒë·ªÉ v·∫Ω
     * @param bullets Danh s√°ch bullets c·∫ßn v·∫Ω
     */
    fun drawBullets(canvas: Canvas, bullets: List<Bullet>) {
        bullets.forEach { bullet ->
            if (bullet.isActive) {
                // üéØ L·∫•y drawable theo h∆∞·ªõng c·ªßa bullet
                val bulletDrawable = getBulletDrawable(bullet.direction)
                val bulletBitmap = drawableToBitmap(bulletDrawable, 64)

                // V·∫Ω bullet t·∫°i v·ªã tr√≠ hi·ªán t·∫°i
                canvas.drawBitmap(
                    bulletBitmap,
                    bullet.currentX - 32,  // Center bullet (64/2 = 32)
                    bullet.currentY - 32,  // Center bullet (64/2 = 32)
                    tilePaint
                )

                // V·∫Ω trail effect theo m√†u c·ªßa h∆∞·ªõng
                val trailColor = when (bullet.direction) {
                    BulletDirection.UP -> android.graphics.Color.BLUE
                    BulletDirection.DOWN -> android.graphics.Color.RED
                    BulletDirection.LEFT -> android.graphics.Color.GREEN
                    BulletDirection.RIGHT -> android.graphics.Color.YELLOW
                }

                val trailPaint = Paint().apply {
                    color = trailColor
                    alpha = 150  // TƒÉng ƒë·ªô trong su·ªët
                }
                canvas.drawCircle(bullet.currentX, bullet.currentY, 5f, trailPaint)
            }
        }
    }
    
    private fun drawableToBitmap(drawable: Drawable, size: Int): Bitmap {
        val bitmap = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888)
        val canvas = Canvas(bitmap)
        
        // X√≥a ho√†n to√†n n·ªÅn - ƒë·∫£m b·∫£o trong su·ªët 100%
        canvas.drawColor(Color.TRANSPARENT, android.graphics.PorterDuff.Mode.CLEAR)
        
        drawable.setBounds(0, 0, size, size)
        drawable.draw(canvas)
        return bitmap
    }

    /**
     * üé® T·∫°o bitmap v·ªõi k√≠ch th∆∞·ªõc custom (width ‚â† height)
     * @param drawable Drawable c·∫ßn chuy·ªÉn ƒë·ªïi
     * @param width Chi·ªÅu r·ªông mong mu·ªën
     * @param height Chi·ªÅu cao mong mu·ªën
     */
    private fun drawableToBitmapCustomSize(drawable: Drawable, width: Int, height: Int): Bitmap {
        val bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)
        val canvas = Canvas(bitmap)
        
        // ƒê·∫£m b·∫£o n·ªÅn ho√†n to√†n trong su·ªët v·ªõi nhi·ªÅu method
        canvas.drawColor(Color.TRANSPARENT, android.graphics.PorterDuff.Mode.CLEAR)
        
        // T·∫°o Paint ƒë·∫∑c bi·ªát cho drawable
        val drawablePaint = Paint().apply {
            isAntiAlias = true
            isFilterBitmap = true
            isDither = true
        }
        
        drawable.setBounds(0, 0, width, height)
        drawable.draw(canvas)
        return bitmap
    }
    
    fun getTileDrawable(tile: Char): Drawable {
        return when (tile) {
            '#' -> wall
            'B' -> box
            'G' -> goal
            else -> floor
        }
    }
    
    fun calculateTileSize(map: Array<CharArray>): Int {
        if (map.isEmpty() || map[0].isEmpty()) return 0
        return min(screenWidth / map[0].size, screenHeight / map.size)
    }
    
    fun calculateBoardOffset(map: Array<CharArray>): Pair<Float, Float> {
        if (map.isEmpty() || map[0].isEmpty()) return Pair(0f, 0f)
        
        val tileSize = calculateTileSize(map)
        val boardWidth = map[0].size * tileSize
        val boardHeight = map.size * tileSize
        val offsetX = (screenWidth - boardWidth) / 2f
        val offsetY = (screenHeight - boardHeight) / 2f
        
        return Pair(offsetX, offsetY)
    }
}
