package com.example.myapplication.rendering

import android.content.Context
import android.graphics.Bitmap
import android.graphics.Canvas
import android.graphics.Color
import android.graphics.Paint
import android.graphics.RectF
import android.graphics.Typeface
import android.graphics.drawable.Drawable
import androidx.core.content.ContextCompat
import com.example.myapplication.R
import com.example.myapplication.entities.AmmoPickup
import com.example.myapplication.entities.AmmoType
import com.example.myapplication.entities.Bullet
import com.example.myapplication.entities.BulletDirection
import com.example.myapplication.entities.BulletType
import com.example.myapplication.entities.LivesPickup
import com.example.myapplication.game.PlayerDirection
import kotlin.math.min
import com.example.myapplication.entities.Monster
import com.example.myapplication.entities.MonsterType

class GameRenderer(private val context: Context) {

    // ===== SUB-RENDERERS =====
    private val resourceManager = ResourceManager(context)
    private val boardRenderer = BoardRenderer(context, this)

    // Monster size constants - d·ªÖ d√†ng ƒëi·ªÅu ch·ªânh
    companion object {
        private const val MONSTER_WIDTH_RATIO = 1.0f   // 70% chi·ªÅu r·ªông tile
        private const val MONSTER_HEIGHT_RATIO = 1.0f  // 100% chi·ªÅu cao tile (gi·ªØ nguy√™n)
    }
    
    // Screen dimensions
    private var screenWidth = 0
    private var screenHeight = 0
    
    
    fun setScreenSize(width: Int, height: Int) {
        screenWidth = width
        screenHeight = height
        boardRenderer.setScreenSize(width, height)
    }

    // ===== GETTER METHODS FOR SUB-RENDERERS =====

    internal fun getWall(): Drawable = resourceManager.wall
    internal fun getBox(): Drawable = resourceManager.box
    internal fun getGoal(): Drawable = resourceManager.goal
    internal fun getFloor(): Drawable = resourceManager.floor
    internal fun getMonsterPaint(): Paint = resourceManager.monsterPaint
    internal fun getTilePaint(): Paint = resourceManager.tilePaint
    internal fun getShadowPaint(): Paint = resourceManager.shadowPaint
    internal fun getTextPaint(): Paint = resourceManager.textPaint

    internal fun getMonsterDrawable(type: MonsterType): Drawable = resourceManager.getMonsterDrawable(type)
    internal fun getCurrentPlayerDrawable(direction: PlayerDirection): Drawable {
        return when (direction) {
            PlayerDirection.UP -> resourceManager.playerUp
            PlayerDirection.DOWN -> resourceManager.playerDown
            PlayerDirection.LEFT -> resourceManager.playerLeft
            PlayerDirection.RIGHT -> resourceManager.playerRight
        }
    }

    fun drawGameBoard(canvas: Canvas, map: Array<CharArray>, playerRow: Int, playerCol: Int,
                     playerDirection: PlayerDirection, monsters: List<Monster>) {
        boardRenderer.drawGameBoard(canvas, map, playerRow, playerCol, playerDirection, monsters)
    }

    
    fun drawGameUI(canvas: Canvas) {
        // V·∫Ω ti√™u ƒë·ªÅ game
        canvas.drawText("Sokoban Game", screenWidth / 2f, 120f, resourceManager.textPaint)

        // V·∫Ω h∆∞·ªõng d·∫´n
        val instructionsPaint = Paint().apply {
            textSize = 40f
            color = Color.LTGRAY
            textAlign = Paint.Align.CENTER
        }
        canvas.drawText(
            "Vu·ªët ƒë·ªÉ di chuy·ªÉn - ƒê·∫©y h·ªôp v√†o m·ª•c ti√™u", 
            screenWidth / 2f, 
            screenHeight - 60f, 
            instructionsPaint
        )
    }

    /**
     * üéØ V·∫Ω t·∫•t c·∫£ bullets l√™n canvas
     *
     * @param canvas Canvas ƒë·ªÉ v·∫Ω
     * @param bullets Danh s√°ch bullets c·∫ßn v·∫Ω
     */
    fun drawBullets(canvas: Canvas, bullets: List<Bullet>) {
        bullets.forEach { bullet ->
            if (bullet.isActive) {
                // üéØ L·∫•y drawable theo h∆∞·ªõng c·ªßa bullet (c√πng cho c·∫£ normal v√† pierce)
                val bulletDrawable = resourceManager.getBulletDrawable(bullet.direction)

                bulletDrawable?.let { drawable ->
                    // V·∫Ω bullet t·∫°i v·ªã tr√≠ hi·ªán t·∫°i v·ªõi scale b·∫±ng c√°ch set bounds
                    val bulletSize = 64 * bullet.scale
                    val halfSize = bulletSize / 2
                    val left = (bullet.currentX - halfSize).toInt()
                    val top = (bullet.currentY - halfSize).toInt()
                    val right = (bullet.currentX + halfSize).toInt()
                    val bottom = (bullet.currentY + halfSize).toInt()

                    drawable.setBounds(left, top, right, bottom)
                    drawable.draw(canvas)
                }

                // V·∫Ω trail effect theo lo·∫°i bullet
                val trailColor = when (bullet.bulletType) {
                    BulletType.NORMAL -> android.graphics.Color.YELLOW
                    BulletType.PIERCE -> android.graphics.Color.CYAN
                    BulletType.STUN -> android.graphics.Color.MAGENTA
                }

                val trailPaint = Paint().apply {
                    color = trailColor
                    alpha = 150  // TƒÉng ƒë·ªô trong su·ªët
                }
                canvas.drawCircle(bullet.currentX, bullet.currentY, 5f, trailPaint)
            }
        }
    }
    

    /**
     * üéõÔ∏è V·∫Ω c√°c n√∫t toggle nh·∫°c/sound ph√≠a tr√™n map
     */
    fun drawToggleButtons(canvas: Canvas, map: Array<CharArray>,
                          musicEnabled: Boolean, soundEnabled: Boolean) {
        if (map.isEmpty() || map[0].isEmpty()) return

        // T√≠nh v·ªã tr√≠ c√°c n√∫t ph√≠a tr√™n map
        val tileSize = min(screenWidth / map[0].size, screenHeight / map.size)
        val boardWidth = map[0].size * tileSize
        val boardHeight = map.size * tileSize
        val offsetX = (screenWidth - boardWidth) / 2f
        val offsetY = (screenHeight - boardHeight) / 2f

        // V·ªã tr√≠ n√∫t: ph√≠a tr√™n map, c√°ch top 20px
        val buttonY = offsetY - 140f  // TƒÉng kho·∫£ng c√°ch ƒë·ªÉ n√∫t l·ªõn h∆°n kh√¥ng b·ªã che
        val buttonSize = 120f         // TƒÉng k√≠ch th∆∞·ªõc n√∫t t·ª´ 80f l√™n 120f

        // N√∫t tr√°i: Toggle Music (b√™n tr√°i m√†n h√¨nh)
        val musicButtonX = 20f
        val musicIcon = if (musicEnabled) resourceManager.musicOnIcon else resourceManager.musicOffIcon
        drawToggleButton(canvas, musicIcon, musicButtonX, buttonY, buttonSize)

        // N√∫t ph·∫£i: Toggle Sound (b√™n ph·∫£i m√†n h√¨nh)
        val soundButtonX = screenWidth - buttonSize - 20f
        val soundIcon = if (soundEnabled) resourceManager.soundOnIcon else resourceManager.soundOffIcon
        drawToggleButton(canvas, soundIcon, soundButtonX, buttonY, buttonSize)
    }

    /**
     * üé® V·∫Ω m·ªôt n√∫t toggle ƒë∆°n l·∫ª
     */
    private fun drawToggleButton(canvas: Canvas, icon: Drawable, x: Float, y: Float, size: Float) {
        // 1Ô∏è‚É£ V·∫Ω shadow tr∆∞·ªõc (ph√≠a sau n√∫t)
        val shadowPaint = Paint().apply {
            color = Color.argb(120, 0, 0, 0)  // Shadow ƒëen nh·∫°t
            style = Paint.Style.FILL
        }
        canvas.drawRoundRect(x + 4, y + 4, x + size + 4, y + size + 4, 15f, 15f, shadowPaint)

        // 2Ô∏è‚É£ V·∫Ω background tr·∫Øng cho n√∫t ƒë·ªÉ d·ªÖ nh√¨n
        val buttonPaint = Paint().apply {
            color = Color.WHITE  // N·ªÅn tr·∫Øng
            style = Paint.Style.FILL
        }
        canvas.drawRoundRect(x, y, x + size, y + size, 15f, 15f, buttonPaint)

        // 3Ô∏è‚É£ V·∫Ω icon v·ªõi padding
        val iconPadding = size * 0.15f  // 15% padding
        val iconLeft = x + iconPadding
        val iconTop = y + iconPadding
        val iconRight = x + size - iconPadding
        val iconBottom = y + size - iconPadding

        icon.setBounds(iconLeft.toInt(), iconTop.toInt(), iconRight.toInt(), iconBottom.toInt())
        icon.draw(canvas)

        // 4Ô∏è‚É£ V·∫Ω border x√°m ƒë·∫≠m cho contrast
        val borderPaint = Paint().apply {
            color = Color.DKGRAY  // Vi·ªÅn x√°m ƒë·∫≠m
            style = Paint.Style.STROKE
            strokeWidth = 4f      // Vi·ªÅn d√†y h∆°n cho n√∫t l·ªõn
        }
        canvas.drawRoundRect(x, y, x + size, y + size, 15f, 15f, borderPaint)
    }


    fun drawAmmoUI(canvas: Canvas, normalAmmo: Int, pierceAmmo: Int, screenWidth: Float, screenHeight: Float) {
        val maxAmmoPerType = 5

        // üÜï NORMAL AMMO UI (h√†ng tr√™n)
        val normalRect = RectF(
            screenWidth - 180f,  // B√™n ph·∫£i m√†n h√¨nh
            220f,                 // V·ªã tr√≠ Y
            screenWidth - 40f,    // C√°ch l·ªÅ ph·∫£i 40px
            280f                  // Chi·ªÅu cao
        )

        // V·∫Ω n·ªÅn cho normal ammo
        val normalUiPaint = Paint().apply {
            color = Color.parseColor("#DD333333")  // N·ªÅn ƒë·ªè
            style = Paint.Style.FILL
        }
        canvas.drawRoundRect(normalRect, 15f, 15f, normalUiPaint)

        // V·∫Ω vi·ªÅn v√†ng
        val borderPaint = Paint().apply {
            color = Color.YELLOW
            style = Paint.Style.STROKE
            strokeWidth = 3f
        }
        canvas.drawRoundRect(normalRect, 15f, 15f, borderPaint)

        // V·∫Ω text cho normal ammo
        val textPaint = Paint().apply {
            color = Color.WHITE
            textSize = 28f
            textAlign = Paint.Align.LEFT
            isAntiAlias = true
            style = Paint.Style.FILL_AND_STROKE
            strokeWidth = 1f
        }

        // V·∫Ω icon normal ammo
        resourceManager.itemBullet.let { drawable ->
            val bulletSize = 28f
            val iconLeft = normalRect.left + 8f
            val iconTop = normalRect.centerY() - bulletSize / 2
            drawable.setBounds(
                iconLeft.toInt(),
                iconTop.toInt(),
                (iconLeft + bulletSize).toInt(),
                (iconTop + bulletSize).toInt()
            )
            drawable.draw(canvas)
        }

        // V·∫Ω s·ªë l∆∞·ª£ng normal ammo
        val textX = normalRect.left + 44f
        val textY = normalRect.centerY() + 8f
        canvas.drawText("$normalAmmo/$maxAmmoPerType", textX, textY, textPaint)

        // üÜï PIERCE AMMO UI (h√†ng d∆∞·ªõi)
        val pierceRect = RectF(
            screenWidth - 180f,  // B√™n ph·∫£i m√†n h√¨nh
            290f,                 // D∆∞·ªõi normal ammo
            screenWidth - 40f,    // C√°ch l·ªÅ ph·∫£i 40px
            350f                  // Chi·ªÅu cao
        )

        // V·∫Ω n·ªÅn cho pierce ammo (m√†u xanh d∆∞∆°ng)
        val pierceUiPaint = Paint().apply {
            color = Color.parseColor("#DD333366")  // N·ªÅn xanh d∆∞∆°ng
            style = Paint.Style.FILL
        }
        canvas.drawRoundRect(pierceRect, 15f, 15f, pierceUiPaint)

        // V·∫Ω vi·ªÅn xanh d∆∞∆°ng
        val pierceBorderPaint = Paint().apply {
            color = Color.CYAN
            style = Paint.Style.STROKE
            strokeWidth = 3f
        }
        canvas.drawRoundRect(pierceRect, 15f, 15f, pierceBorderPaint)

        // V·∫Ω icon pierce ammo
        resourceManager.itemBullet.let { drawable ->
            val bulletSize = 28f
            val iconLeft = pierceRect.left + 8f
            val iconTop = pierceRect.centerY() - bulletSize / 2
            drawable.setBounds(
                iconLeft.toInt(),
                iconTop.toInt(),
                (iconLeft + bulletSize).toInt(),
                (iconTop + bulletSize).toInt()
            )
            drawable.draw(canvas)
        }

        // V·∫Ω s·ªë l∆∞·ª£ng pierce ammo
        canvas.drawText("$pierceAmmo/$maxAmmoPerType", textX, pierceRect.centerY() + 8f, textPaint)
    }

    // üÜï V·∫º LIVES UI ·ªû GI·ªÆA M√ÄN H√åNH
    fun drawLivesUI(canvas: Canvas, lives: Int, maxLives: Int, screenWidth: Float, screenHeight: Float) {
        // V·∫Ω ·ªü gi·ªØa m√†n h√¨nh, ph√≠a tr√™n ammo buttons
        val uiWidth = 150f
        val uiHeight = 100f
        val uiRect = RectF(
            screenWidth / 2 - uiWidth / 2,  // CƒÉn gi·ªØa ngang
            200f,                           // C√°ch top 250px (th·∫•p xu·ªëng th√™m 100px)
            screenWidth / 2 + uiWidth / 2,  // CƒÉn gi·ªØa ngang
            250f + uiHeight                 // Chi·ªÅu cao
        )

        // V·∫Ω n·ªÅn
        val uiPaint = Paint().apply {
            color = Color.parseColor("#FFFF99")  // N·ªÅn ƒë·ªè cho lives
            style = Paint.Style.FILL
        }
        canvas.drawRoundRect(uiRect, 15f, 15f, uiPaint)

        // V·∫Ω vi·ªÅn
        val borderPaint = Paint().apply {
            color = Color.RED
            style = Paint.Style.STROKE
            strokeWidth = 3f
        }
        canvas.drawRoundRect(uiRect, 15f, 15f, borderPaint)

        // V·∫Ω text
        val textPaint = Paint().apply {
            color = Color.BLACK
            textSize = 62f
            textAlign = Paint.Align.CENTER
            isAntiAlias = true
            style = Paint.Style.FILL_AND_STROKE
            strokeWidth = 2f
        }

        val centerX = uiRect.centerX()
        val centerY = uiRect.centerY() + 8f

        // V·∫Ω "‚ù§Ô∏è" emoji
        val shadowPaint = Paint().apply {
            color = Color.BLACK
            textSize = 50f
            textAlign = Paint.Align.CENTER
            isAntiAlias = true
            style = Paint.Style.FILL_AND_STROKE
            strokeWidth = 1f
        }
        canvas.drawText("‚ù§Ô∏è", centerX + 1f, centerY + 1f, shadowPaint)
        canvas.drawText("‚ù§Ô∏è", centerX, centerY, textPaint)

        // V·∫Ω s·ªë lives
        val numberPaint = Paint().apply {
            color = Color.BLACK
            textSize = 40f
            textAlign = Paint.Align.CENTER
            isAntiAlias = true
            style = Paint.Style.FILL_AND_STROKE
            strokeWidth = 1f
        }
        canvas.drawText("$lives/$maxLives", centerX, centerY + 50f, numberPaint)
    }

    // üÜï V·∫º N√öT CH·ªåN LO·∫†I ƒê·∫†N ·ªû PH√çA D∆Ø·ªöI (to v√† d·ªÖ ·∫•n)
    fun drawBulletTypeButtons(canvas: Canvas, normalAmmo: Int, pierceAmmo: Int, stunAmmo: Int, screenWidth: Float, screenHeight: Float, selectedType: BulletType, buildMode: Boolean) {
        val buttonWidth = 150f  // Gi·∫£m k√≠ch th∆∞·ªõc cho 3 n√∫t
        val buttonHeight = 120f
        val buttonSpacing = 20f
        val bottomMargin = 150f

        // N√∫t normal ammo (b√™n tr√°i)
        val normalButtonRect = RectF(
            screenWidth / 2 - buttonWidth * 1.5f - buttonSpacing,
            screenHeight - buttonHeight - bottomMargin,
            screenWidth / 2 - buttonWidth * 0.5f - buttonSpacing / 2,
            screenHeight - bottomMargin
        )

        // N√∫t pierce ammo (gi·ªØa)
        val pierceButtonRect = RectF(
            screenWidth / 2 - buttonWidth * 0.5f,
            screenHeight - buttonHeight - bottomMargin,
            screenWidth / 2 + buttonWidth * 0.5f,
            screenHeight - bottomMargin
        )

        // N√∫t stun ammo (b√™n ph·∫£i)
        val stunButtonRect = RectF(
            screenWidth / 2 + buttonWidth * 0.5f + buttonSpacing / 2,
            screenHeight - buttonHeight - bottomMargin,
            screenWidth / 2 + buttonWidth * 1.5f + buttonSpacing,
            screenHeight - bottomMargin
        )

        // N√∫t build wall (c·∫°nh b√™n ph·∫£i stun)
        val buildButtonRect = RectF(
            screenWidth / 2 + buttonWidth * 1.5f + buttonSpacing * 1.5f,
            screenHeight - buttonHeight - bottomMargin,
            screenWidth / 2 + buttonWidth * 2.5f + buttonSpacing * 2,
            screenHeight - bottomMargin
        )

        val buttonPaint = Paint().apply { style = Paint.Style.FILL }
        val borderPaint = Paint().apply { style = Paint.Style.STROKE; strokeWidth = 4f } // üÜï TƒÉng border t·ª´ 3f l√™n 4f
        val textPaint = Paint().apply {
            color = Color.WHITE
            textSize = 48f  // üÜï TƒÉng t·ª´ 24f l√™n 32f
            textAlign = Paint.Align.CENTER
            isAntiAlias = true
        }

        // V·∫Ω n√∫t normal ammo
        buttonPaint.color = if (selectedType == BulletType.NORMAL) Color.parseColor("#FF6B35") else Color.parseColor("#DD333333")
        borderPaint.color = if (selectedType == BulletType.NORMAL) Color.YELLOW else Color.GRAY
        canvas.drawRoundRect(normalButtonRect, 10f, 10f, buttonPaint)
        canvas.drawRoundRect(normalButtonRect, 10f, 10f, borderPaint)

        // V·∫Ω icon normal ammo
        resourceManager.itemBullet.let { drawable ->
            val iconSize = 62f  // üÜï TƒÉng t·ª´ 32f l√™n 50f
            val iconLeft = normalButtonRect.left + 15f  // üÜï TƒÉng margin t·ª´ 10f l√™n 15f
            val iconTop = normalButtonRect.centerY() - iconSize / 2
            drawable.setBounds(
                iconLeft.toInt(),
                iconTop.toInt(),
                (iconLeft + iconSize).toInt(),
                (iconTop + iconSize).toInt()
            )
            drawable.draw(canvas)
        }

        // V·∫Ω s·ªë l∆∞·ª£ng normal ammo
        canvas.drawText(
            "$normalAmmo",
            normalButtonRect.centerX() + 25f,  // üÜï TƒÉng t·ª´ 15f l√™n 25f
            normalButtonRect.centerY() + 10f,  // üÜï TƒÉng t·ª´ 8f l√™n 10f
            textPaint
        )

        // V·∫Ω n√∫t pierce ammo
        buttonPaint.color = if (selectedType == BulletType.PIERCE) Color.parseColor("#4A90E2") else Color.parseColor("#DD333366")
        borderPaint.color = if (selectedType == BulletType.PIERCE) Color.CYAN else Color.GRAY
        canvas.drawRoundRect(pierceButtonRect, 10f, 10f, buttonPaint)
        canvas.drawRoundRect(pierceButtonRect, 10f, 10f, borderPaint)

        // V·∫Ω icon pierce ammo (d√πng rocket)
        resourceManager.rocket.let { drawable ->
            val iconSize = 62f  // üÜï TƒÉng t·ª´ 32f l√™n 50f
            val iconLeft = pierceButtonRect.left + 15f  // üÜï TƒÉng margin t·ª´ 10f l√™n 15f
            val iconTop = pierceButtonRect.centerY() - iconSize / 2
            drawable.setBounds(
                iconLeft.toInt(),
                iconTop.toInt(),
                (iconLeft + iconSize).toInt(),
                (iconTop + iconSize).toInt()
            )
            drawable.draw(canvas)
        }

        // V·∫Ω s·ªë l∆∞·ª£ng pierce ammo
        canvas.drawText(
            "$pierceAmmo",
            pierceButtonRect.centerX() + 15f,
            pierceButtonRect.centerY() + 10f,
            textPaint
        )

        // V·∫Ω n√∫t stun ammo
        buttonPaint.color = if (selectedType == BulletType.STUN) Color.parseColor("#9933FF") else Color.parseColor("#DD6600CC")  // M√†u t√≠m cho stun
        borderPaint.color = if (selectedType == BulletType.STUN) Color.MAGENTA else Color.GRAY
        canvas.drawRoundRect(stunButtonRect, 10f, 10f, buttonPaint)
        canvas.drawRoundRect(stunButtonRect, 10f, 10f, borderPaint)

        // V·∫Ω icon stun ammo (‚ö°) ·ªü b√™n tr√°i
        val stunIconPaint = Paint().apply {
            color = Color.WHITE
            textSize = 52f
            textAlign = Paint.Align.LEFT
            isAntiAlias = true
            style = Paint.Style.FILL_AND_STROKE
            strokeWidth = 2f
        }
        canvas.drawText(
            "‚ö°",
            stunButtonRect.left + 30f,
            stunButtonRect.centerY() + 10f,
            stunIconPaint
        )

        // V·∫Ω s·ªë l∆∞·ª£ng stun ammo ·ªü b√™n ph·∫£i (c√πng d√≤ng)
        val stunNumberPaint = Paint().apply {
            color = Color.WHITE
            textSize = 48f
            textAlign = Paint.Align.RIGHT
            isAntiAlias = true
            style = Paint.Style.FILL_AND_STROKE
            strokeWidth = 1f
        }
        canvas.drawText(
            "$stunAmmo",
            stunButtonRect.right - 40f,
            stunButtonRect.centerY() + 10f,
            stunNumberPaint
        )

        // V·∫Ω n√∫t build wall
        buttonPaint.color = if (buildMode) Color.parseColor("#FF6600") else Color.parseColor("#DD444444")  // M√†u cam cho build
        borderPaint.color = if (buildMode) Color.parseColor("#FFAA00") else Color.GRAY
        canvas.drawRoundRect(buildButtonRect, 10f, 10f, buttonPaint)
        canvas.drawRoundRect(buildButtonRect, 10f, 10f, borderPaint)

        // V·∫Ω icon build wall (üß± ho·∫∑c wall symbol)
        val buildIconPaint = Paint().apply {
            color = Color.WHITE
            textSize = 32f
            textAlign = Paint.Align.CENTER
            isAntiAlias = true
            style = Paint.Style.FILL_AND_STROKE
            strokeWidth = 2f
        }
        canvas.drawText(
            "üß±",
            buildButtonRect.centerX(),
            buildButtonRect.centerY() + 10f,
            buildIconPaint
        )
    }

    // üÜï V·∫º LIVES PICKUPS TR√äN MAP
    fun drawLivesPickups(canvas: Canvas, livesPickups: List<LivesPickup>, tileSize: Float, offsetX: Float, offsetY: Float) {
        livesPickups.forEach { lives ->
            val (screenX, screenY) = lives.getScreenPosition(tileSize, offsetX, offsetY)

            // V·∫Ω n·ªÅn tim ƒë·ªè
            val backgroundPaint = Paint().apply {
                color = Color.RED
                style = Paint.Style.FILL
            }
            val backgroundSize = tileSize * 0.6f
            val backgroundRect = RectF(
                screenX - backgroundSize / 2,
                screenY - backgroundSize / 2,
                screenX + backgroundSize / 2,
                screenY + backgroundSize / 2
            )
            canvas.drawRoundRect(backgroundRect, backgroundSize * 0.2f, backgroundSize * 0.2f, backgroundPaint)

            // V·∫Ω vi·ªÅn v√†ng
            val borderPaint = Paint().apply {
                color = Color.YELLOW
                style = Paint.Style.STROKE
                strokeWidth = 2f
            }
            canvas.drawRoundRect(backgroundRect, backgroundSize * 0.2f, backgroundSize * 0.2f, borderPaint)

            // V·∫Ω text "‚ù§Ô∏è" nh·ªè
            val textPaint = Paint().apply {
                color = Color.WHITE
                textSize = tileSize * 0.4f
                textAlign = Paint.Align.CENTER
                isAntiAlias = true
                style = Paint.Style.FILL_AND_STROKE
                strokeWidth = 1f
            }
            canvas.drawText("‚ù§Ô∏è", screenX, screenY + textPaint.textSize * 0.3f, textPaint)
        }
    }

    // Th√™m method v·∫Ω ammo pickups:

    fun drawAmmoPickups(canvas: Canvas, ammoPickups: List<AmmoPickup>, tileSize: Float, offsetX: Float, offsetY: Float) {
        ammoPickups.forEach { ammo ->
            val (screenX, screenY) = ammo.getScreenPosition(tileSize, offsetX, offsetY)

            // V·∫Ω n·ªÅn tr·∫Øng vu√¥ng
            val backgroundPaint = Paint().apply {
                color = Color.WHITE
                style = Paint.Style.FILL
            }
            val backgroundSize = tileSize * 0.6f
            val backgroundRect = RectF(
                screenX - backgroundSize / 2,
                screenY - backgroundSize / 2,
                screenX + backgroundSize / 2,
                screenY + backgroundSize / 2
            )
            canvas.drawRect(backgroundRect, backgroundPaint)

            // V·∫Ω vi·ªÅn v·ªõi m√†u kh√°c nhau theo type
            val borderColor = when (ammo.ammoType) {
                AmmoType.NORMAL -> Color.BLACK
                AmmoType.PIERCE -> Color.CYAN
                AmmoType.STUN -> Color.MAGENTA  // T√≠m cho stun ammo
            }
            val borderPaint = Paint().apply {
                color = borderColor
                style = Paint.Style.STROKE
                strokeWidth = 2f
            }
            canvas.drawRect(backgroundRect, borderPaint)

            // V·∫Ω h√¨nh ammo theo type - normal d√πng item_bullet, pierce d√πng rocket, stun d√πng item_bullet v·ªõi border kh√°c
            val ammoDrawable = when (ammo.ammoType) {
                AmmoType.NORMAL -> resourceManager.itemBullet
                AmmoType.PIERCE -> resourceManager.rocket
                AmmoType.STUN -> resourceManager.itemBullet  // STUN d√πng item_bullet nh∆∞ng border kh√°c
            }

            ammoDrawable.let { drawable ->
                val ammoSize = tileSize * 0.4f
                val left = (screenX - ammoSize / 2).toInt()
                val top = (screenY - ammoSize / 2).toInt()
                val right = (screenX + ammoSize / 2).toInt()
                val bottom = (screenY + ammoSize / 2).toInt()

                drawable.setBounds(left, top, right, bottom)
                drawable.draw(canvas)
            }
        }
    }

    /**
     * üõ°Ô∏è Draw player shield effect when on safe zone
     */
    fun drawPlayerShield(canvas: Canvas, playerRow: Int, playerCol: Int, gameLogic: com.example.myapplication.game.GameLogic, animationTime: Float) {
        // Check b·∫±ng map character tr·ª±c ti·∫øp
        val mapChar = gameLogic.getMap().getOrNull(playerRow)?.getOrNull(playerCol)
        if (mapChar != 'S') return

        val tileSize = min(screenWidth / gameLogic.getMap()[0].size, screenHeight / gameLogic.getMap().size)
        val boardWidth = gameLogic.getMap()[0].size * tileSize
        val boardHeight = gameLogic.getMap().size * tileSize
        val offsetX = (screenWidth - boardWidth) / 2f
        val offsetY = (screenHeight - boardHeight) / 2f
        
        // Calculate player center position
        val playerCenterX = offsetX + playerCol * tileSize + tileSize / 2f
        val playerCenterY = offsetY + playerRow * tileSize + tileSize / 2f

        // Shield radius with pulsing animation - TƒÇNG T·ªêC ƒê·ªò R√ï R√ÄNG
        val baseShieldRadius = tileSize * 0.6f
        val pulseSpeed = 0.003f  // Chu k·ª≥: ~2 gi√¢y
        val pulseFactor = (Math.sin((animationTime * pulseSpeed).toDouble()) * 0.2f + 1f).toFloat()
        val shieldRadius = baseShieldRadius * pulseFactor

        // Draw shield glow effect
        val shieldPaint = android.graphics.Paint().apply {
            color = android.graphics.Color.parseColor("#00BFFF") // Deep sky blue
            style = android.graphics.Paint.Style.STROKE
            strokeWidth = 4f
            alpha = 220
            setShadowLayer(12f, 0f, 0f, android.graphics.Color.parseColor("#00BFFF"))
        }

        // Draw outer glow with animation - NH·∫§P NH√ÅY NHANH H∆†N
        val alphaSpeed1 = 0.005f
        shieldPaint.alpha = (150 + Math.sin((animationTime * alphaSpeed1).toDouble()) * 70).toInt().coerceIn(100, 220)
        shieldPaint.strokeWidth = 16f
        canvas.drawCircle(playerCenterX, playerCenterY, shieldRadius + 8f, shieldPaint)

        // Draw main shield ring - NH·∫§P NH√ÅY NHANH H∆†N
        val alphaSpeed2 = 0.006f
        shieldPaint.alpha = (200 + Math.sin((animationTime * alphaSpeed2).toDouble()) * 55).toInt().coerceIn(180, 255)
        shieldPaint.strokeWidth = 8f
        canvas.drawCircle(playerCenterX, playerCenterY, shieldRadius, shieldPaint)

        // Draw inner shield ring
        shieldPaint.alpha = 255
        shieldPaint.strokeWidth = 3f
        canvas.drawCircle(playerCenterX, playerCenterY, shieldRadius - 4f, shieldPaint)

        // Draw shield particles (small dots around the circle) with rotation - QUAY NHANH H∆†N
        val particlePaint = android.graphics.Paint().apply {
            color = android.graphics.Color.parseColor("#FFFFFF")
            style = android.graphics.Paint.Style.FILL
            alpha = (220 + Math.sin((animationTime * 0.008f).toDouble()) * 55).toInt().coerceIn(200, 275)
            setShadowLayer(4f, 0f, 0f, android.graphics.Color.WHITE)
        }

        val particleCount = 12
        val particleRadius = 4f
        val particleDistance = shieldRadius + 10f
        val rotationSpeed = 0.05f  // TƒÇNG T·ªêC ƒê·ªò QUAY x50 l·∫ßn! (1 v√≤ng trong ~4 gi√¢y)
        val rotationOffset = animationTime * rotationSpeed

        for (i in 0 until particleCount) {
            val angle = ((i * 360f / particleCount) + rotationOffset) * Math.PI / 180f
            val particleX = playerCenterX + particleDistance * Math.cos(angle).toFloat()
            val particleY = playerCenterY + particleDistance * Math.sin(angle).toFloat()
            canvas.drawCircle(particleX, particleY, particleRadius, particlePaint)
        }

        // Draw energy arcs (lightning-like effects) - XOAY NHANH H∆†N
        val arcPaint = android.graphics.Paint().apply {
            color = android.graphics.Color.parseColor("#FFFFFF")
            style = android.graphics.Paint.Style.STROKE
            strokeWidth = 3f
            alpha = (180 + Math.sin((animationTime * 0.01f).toDouble()) * 75).toInt().coerceIn(150, 255)
            strokeCap = android.graphics.Paint.Cap.ROUND
            setShadowLayer(6f, 0f, 0f, android.graphics.Color.WHITE)
        }

        // Draw 3 energy arcs - QUAY NG∆Ø·ª¢C CHI·ªÄU V√Ä NHANH H∆†N
        val arcRotationSpeed = 0.08f  // TƒÇNG T·ªêC ƒê·ªò QUAY x53 l·∫ßn! (1 v√≤ng trong ~2.5 gi√¢y)
        for (j in 0 until 3) {
            val arcAngle = (j * 120f - animationTime * arcRotationSpeed) * Math.PI / 180f
            val arcStartAngle = arcAngle - Math.PI / 6
            val arcEndAngle = arcAngle + Math.PI / 6
            val arcRadius = shieldRadius - 2f

            val startX = playerCenterX + arcRadius * Math.cos(arcStartAngle).toFloat()
            val startY = playerCenterY + arcRadius * Math.sin(arcStartAngle).toFloat()
            val endX = playerCenterX + arcRadius * Math.cos(arcEndAngle).toFloat()
            val endY = playerCenterY + arcRadius * Math.sin(arcEndAngle).toFloat()

            canvas.drawLine(startX, startY, endX, endY, arcPaint)
        }
    }

    // ==================== BACKWARD COMPATIBILITY METHODS ====================

    /**
     * Delegate to BoardRenderer for backward compatibility
     */
    fun calculateTileSize(map: Array<CharArray>): Int {
        return boardRenderer.calculateTileSize(map)
    }

    /**
     * Delegate to BoardRenderer for backward compatibility
     */
    fun calculateBoardOffset(map: Array<CharArray>): Pair<Float, Float> {
        return boardRenderer.calculateBoardOffset(map)
    }
}