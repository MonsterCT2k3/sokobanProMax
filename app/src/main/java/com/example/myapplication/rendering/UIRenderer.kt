package com.example.myapplication.rendering

import android.graphics.Canvas
import android.graphics.Color
import android.graphics.Paint
import android.graphics.RectF
import android.graphics.Typeface
import android.graphics.drawable.Drawable
import com.example.myapplication.entities.BulletType
import kotlin.math.min

/**
 * üñ•Ô∏è UIRenderer - V·∫Ω c√°c elements giao di·ªán ng∆∞·ªùi d√πng
 *
 * Nhi·ªám v·ª•:
 * - V·∫Ω ti√™u ƒë·ªÅ game v√† h∆∞·ªõng d·∫´n
 * - V·∫Ω n√∫t toggle (music/sound)
 * - V·∫Ω n√∫t ch·ªçn lo·∫°i ƒë·∫°n (normal, pierce, stun, build)
 */
class UIRenderer(private val resourceManager: ResourceManager) {

    private var screenWidth = 0
    private var screenHeight = 0

    fun setScreenSize(width: Int, height: Int) {
        screenWidth = width
        screenHeight = height
    }

    /**
     * üéÆ V·∫Ω UI ch√≠nh c·ªßa game (ti√™u ƒë·ªÅ v√† h∆∞·ªõng d·∫´n)
     */
    fun drawGameUI(canvas: Canvas, currentLevelId: Int = 1) {
        // V·∫Ω ti√™u ƒë·ªÅ game v·ªõi font l·ªõn v√† m√†u tr·∫Øng
        val titlePaint = Paint().apply {
            color = Color.WHITE
            textSize = 44f  // TƒÉng t·ª´ ~60f (size m·∫∑c ƒë·ªãnh) l√™n 80f
            textAlign = Paint.Align.CENTER
            isAntiAlias = true
            typeface = Typeface.create(Typeface.DEFAULT, Typeface.BOLD)
            style = Paint.Style.FILL_AND_STROKE
            strokeWidth = 2f
        }

        // V·∫Ω shadow cho ti√™u ƒë·ªÅ
        val shadowPaint = Paint().apply {
            color = Color.BLACK
            textSize = 44f
            textAlign = Paint.Align.CENTER
            isAntiAlias = true
            typeface = Typeface.create(Typeface.DEFAULT, Typeface.BOLD)
            style = Paint.Style.FILL_AND_STROKE
            strokeWidth = 1f
        }

        canvas.drawText("Sokoban Game", screenWidth / 2f + 2f, 122f, shadowPaint)
        canvas.drawText("Sokoban Game", screenWidth / 2f, 120f, titlePaint)

        // üÜï V·∫Ω level display ngay d∆∞·ªõi ti√™u ƒë·ªÅ
        val levelPaint = Paint().apply {
            color = Color.YELLOW
            textSize = 32f
            textAlign = Paint.Align.CENTER
            isAntiAlias = true
            typeface = Typeface.create(Typeface.DEFAULT, Typeface.BOLD)
            style = Paint.Style.FILL_AND_STROKE
            strokeWidth = 1f
        }

        val levelShadowPaint = Paint().apply {
            color = Color.BLACK
            textSize = 32f
            textAlign = Paint.Align.CENTER
            isAntiAlias = true
            typeface = Typeface.create(Typeface.DEFAULT, Typeface.BOLD)
            style = Paint.Style.FILL_AND_STROKE
            strokeWidth = 1f
        }

        val levelText = "LEVEL $currentLevelId"
        canvas.drawText(levelText, screenWidth / 2f + 1f, 162f, levelShadowPaint)
        canvas.drawText(levelText, screenWidth / 2f, 160f, levelPaint)

        // V·∫Ω h∆∞·ªõng d·∫´n
        val instructionsPaint = Paint().apply {
            textSize = 40f
            color = Color.LTGRAY
            textAlign = Paint.Align.CENTER
        }
        canvas.drawText(
            "Vu·ªët ƒë·ªÉ di chuy·ªÉn - ƒê·∫©y h·ªôp v√†o m·ª•c ti√™u",
            screenWidth / 2f,
            screenHeight - 60f,
            instructionsPaint
        )
    }

    /**
     * üéõÔ∏è V·∫Ω c√°c n√∫t toggle nh·∫°c/sound ph√≠a tr√™n map
     */
    fun drawToggleButtons(canvas: Canvas, map: Array<CharArray>,
                          musicEnabled: Boolean, soundEnabled: Boolean) {
        if (map.isEmpty() || map[0].isEmpty()) return

        // T√≠nh v·ªã tr√≠ c√°c n√∫t ph√≠a tr√™n map
        val tileSize = min(screenWidth / map[0].size, screenHeight / map.size)
        val boardWidth = map[0].size * tileSize
        val boardHeight = map.size * tileSize
        val offsetX = (screenWidth - boardWidth) / 2f
        val offsetY = (screenHeight - boardHeight) / 2f

        // V·ªã tr√≠ n√∫t: ph√≠a tr√™n map, c√°ch top 20px
        val buttonY = offsetY - 140f  // TƒÉng kho·∫£ng c√°ch ƒë·ªÉ n√∫t l·ªõn h∆°n kh√¥ng b·ªã che
        val buttonSize = 120f         // TƒÉng k√≠ch th∆∞·ªõc n√∫t t·ª´ 80f l√™n 120f

        // N√∫t tr√°i: Toggle Music (b√™n tr√°i m√†n h√¨nh)
        val musicButtonX = 20f
        val musicIcon = if (musicEnabled) resourceManager.musicOnIcon else resourceManager.musicOffIcon
        drawToggleButton(canvas, musicIcon, musicButtonX, buttonY, buttonSize)

        // N√∫t ph·∫£i: Toggle Sound (b√™n ph·∫£i m√†n h√¨nh)
        val soundButtonX = screenWidth - buttonSize - 20f
        val soundIcon = if (soundEnabled) resourceManager.soundOnIcon else resourceManager.soundOffIcon
        drawToggleButton(canvas, soundIcon, soundButtonX, buttonY, buttonSize)
    }

    /**
     * üé® V·∫Ω m·ªôt n√∫t toggle ƒë∆°n l·∫ª
     */
    private fun drawToggleButton(canvas: Canvas, icon: Drawable, x: Float, y: Float, size: Float) {
        // 1Ô∏è‚É£ V·∫Ω shadow tr∆∞·ªõc (ph√≠a sau n√∫t)
        val shadowPaint = Paint().apply {
            color = Color.argb(120, 0, 0, 0)  // Shadow ƒëen nh·∫°t
            style = Paint.Style.FILL
        }
        canvas.drawRoundRect(x + 4, y + 4, x + size + 4, y + size + 4, 15f, 15f, shadowPaint)

        // 2Ô∏è‚É£ V·∫Ω background tr·∫Øng cho n√∫t ƒë·ªÉ d·ªÖ nh√¨n
        val buttonPaint = Paint().apply {
            color = Color.WHITE  // N·ªÅn tr·∫Øng
            style = Paint.Style.FILL
        }
        canvas.drawRoundRect(x, y, x + size, y + size, 15f, 15f, buttonPaint)

        // 3Ô∏è‚É£ V·∫Ω icon v·ªõi padding
        val iconPadding = size * 0.15f  // 15% padding
        val iconLeft = x + iconPadding
        val iconTop = y + iconPadding
        val iconRight = x + size - iconPadding
        val iconBottom = y + size - iconPadding

        icon.setBounds(iconLeft.toInt(), iconTop.toInt(), iconRight.toInt(), iconBottom.toInt())
        icon.draw(canvas)

        // 4Ô∏è‚É£ V·∫Ω border x√°m ƒë·∫≠m cho contrast
        val borderPaint = Paint().apply {
            color = Color.DKGRAY  // Vi·ªÅn x√°m ƒë·∫≠m
            style = Paint.Style.STROKE
            strokeWidth = 4f      // Vi·ªÅn d√†y h∆°n cho n√∫t l·ªõn
        }
        canvas.drawRoundRect(x, y, x + size, y + size, 15f, 15f, borderPaint)
    }

    /**
     * üî´ V·∫Ω n√∫t ch·ªçn lo·∫°i ƒë·∫°n ·ªü ph√≠a d∆∞·ªõi
     */
    fun drawBulletTypeButtons(canvas: Canvas, normalAmmo: Int, pierceAmmo: Int, stunAmmo: Int,
                             selectedType: BulletType, buildMode: Boolean) {
        val buttonWidth = 140f  // Gi·∫£m k√≠ch th∆∞·ªõc cho 4 n√∫t
        val buttonHeight = 110f
        val buttonSpacing = 15f
        val bottomMargin = 150f

        // T·ªïng chi·ªÅu r·ªông c·ªßa 4 n√∫t v√† 3 kho·∫£ng tr·ªëng
        val totalWidth = buttonWidth * 4 + buttonSpacing * 3

        // B·∫Øt ƒë·∫ßu t·ª´ gi·ªØa m√†n h√¨nh, l√πi v·ªÅ b√™n tr√°i ƒë·ªÉ cƒÉn gi·ªØa
        val startX = screenWidth / 2 - totalWidth / 2

        // N√∫t normal ammo (th·ª© 1 t·ª´ tr√°i)
        val normalButtonRect = RectF(
            startX,
            screenHeight - buttonHeight - bottomMargin,
            startX + buttonWidth,
            screenHeight - bottomMargin
        )

        // N√∫t pierce ammo (th·ª© 2 t·ª´ tr√°i)
        val pierceButtonRect = RectF(
            startX + buttonWidth + buttonSpacing,
            screenHeight - buttonHeight - bottomMargin,
            startX + buttonWidth * 2 + buttonSpacing,
            screenHeight - bottomMargin
        )

        // N√∫t stun ammo (th·ª© 3 t·ª´ tr√°i)
        val stunButtonRect = RectF(
            startX + buttonWidth * 2 + buttonSpacing * 2,
            screenHeight - buttonHeight - bottomMargin,
            startX + buttonWidth * 3 + buttonSpacing * 2,
            screenHeight - bottomMargin
        )

        // N√∫t build wall (th·ª© 4 t·ª´ tr√°i)
        val buildButtonRect = RectF(
            startX + buttonWidth * 3 + buttonSpacing * 3,
            screenHeight - buttonHeight - bottomMargin,
            startX + buttonWidth * 4 + buttonSpacing * 3,
            screenHeight - bottomMargin
        )

        val buttonPaint = Paint().apply { style = Paint.Style.FILL }
        val borderPaint = Paint().apply { style = Paint.Style.STROKE; strokeWidth = 4f } // üÜï TƒÉng border t·ª´ 3f l√™n 4f
        val textPaint = Paint().apply {
            color = Color.WHITE
            textSize = 42f  // Gi·∫£m t·ª´ 48f ƒë·ªÉ ph√π h·ª£p v·ªõi n√∫t nh·ªè h∆°n
            textAlign = Paint.Align.CENTER
            isAntiAlias = true
        }

        // V·∫Ω n√∫t normal ammo
        buttonPaint.color = if (selectedType == BulletType.NORMAL) Color.parseColor("#FF6B35") else Color.parseColor("#DD333333")
        borderPaint.color = if (selectedType == BulletType.NORMAL) Color.YELLOW else Color.GRAY
        canvas.drawRoundRect(normalButtonRect, 10f, 10f, buttonPaint)
        canvas.drawRoundRect(normalButtonRect, 10f, 10f, borderPaint)

        // V·∫Ω icon normal ammo
        resourceManager.itemBullet.let { drawable ->
            val iconSize = 52f  // Gi·∫£m t·ª´ 62f ƒë·ªÉ ph√π h·ª£p v·ªõi n√∫t nh·ªè h∆°n
            val iconLeft = normalButtonRect.left + 12f  // Gi·∫£m margin
            val iconTop = normalButtonRect.centerY() - iconSize / 2
            drawable.setBounds(
                iconLeft.toInt(),
                iconTop.toInt(),
                (iconLeft + iconSize).toInt(),
                (iconTop + iconSize).toInt()
            )
            drawable.draw(canvas)
        }

        // V·∫Ω s·ªë l∆∞·ª£ng normal ammo
        canvas.drawText(
            "$normalAmmo",
            normalButtonRect.centerX() + 20f,  // Gi·∫£m t·ª´ 25f
            normalButtonRect.centerY() + 8f,   // Gi·∫£m t·ª´ 10f
            textPaint
        )

        // V·∫Ω n√∫t pierce ammo
        buttonPaint.color = if (selectedType == BulletType.PIERCE) Color.parseColor("#4A90E2") else Color.parseColor("#DD333366")
        borderPaint.color = if (selectedType == BulletType.PIERCE) Color.CYAN else Color.GRAY
        canvas.drawRoundRect(pierceButtonRect, 10f, 10f, buttonPaint)
        canvas.drawRoundRect(pierceButtonRect, 10f, 10f, borderPaint)

        // V·∫Ω icon pierce ammo (d√πng rocket)
        resourceManager.rocket.let { drawable ->
            val iconSize = 52f  // Gi·∫£m t·ª´ 62f ƒë·ªÉ ph√π h·ª£p v·ªõi n√∫t nh·ªè h∆°n
            val iconLeft = pierceButtonRect.left + 12f  // Gi·∫£m margin
            val iconTop = pierceButtonRect.centerY() - iconSize / 2
            drawable.setBounds(
                iconLeft.toInt(),
                iconTop.toInt(),
                (iconLeft + iconSize).toInt(),
                (iconTop + iconSize).toInt()
            )
            drawable.draw(canvas)
        }

        // V·∫Ω s·ªë l∆∞·ª£ng pierce ammo
        canvas.drawText(
            "$pierceAmmo",
            pierceButtonRect.centerX() + 15f,
            pierceButtonRect.centerY() + 8f,
            textPaint
        )

        // V·∫Ω n√∫t stun ammo
        buttonPaint.color = if (selectedType == BulletType.STUN) Color.parseColor("#9933FF") else Color.parseColor("#DD6600CC")  // M√†u t√≠m cho stun
        borderPaint.color = if (selectedType == BulletType.STUN) Color.MAGENTA else Color.GRAY
        canvas.drawRoundRect(stunButtonRect, 10f, 10f, buttonPaint)
        canvas.drawRoundRect(stunButtonRect, 10f, 10f, borderPaint)

        // V·∫Ω icon stun ammo (d√πng stun drawable)
        resourceManager.stunBullet.let { drawable ->
            val iconSize = 52f  // Gi·∫£m t·ª´ 62f ƒë·ªÉ ph√π h·ª£p v·ªõi n√∫t nh·ªè h∆°n
            val iconLeft = stunButtonRect.left + 12f  // Gi·∫£m margin
            val iconTop = stunButtonRect.centerY() - iconSize / 2
            drawable.setBounds(
                iconLeft.toInt(),
                iconTop.toInt(),
                (iconLeft + iconSize).toInt(),
                (iconTop + iconSize).toInt()
            )
            drawable.draw(canvas)
        }

        // V·∫Ω s·ªë l∆∞·ª£ng stun ammo
        canvas.drawText(
            "$stunAmmo",
            stunButtonRect.centerX() + 15f,
            stunButtonRect.centerY() + 8f,
            textPaint
        )

        // V·∫Ω n√∫t build wall
        buttonPaint.color = if (buildMode) Color.parseColor("#FF6600") else Color.parseColor("#DD444444")  // M√†u cam cho build
        borderPaint.color = if (buildMode) Color.parseColor("#FFAA00") else Color.GRAY
        canvas.drawRoundRect(buildButtonRect, 10f, 10f, buttonPaint)
        canvas.drawRoundRect(buildButtonRect, 10f, 10f, borderPaint)

        // V·∫Ω icon build wall (üß± ho·∫∑c wall symbol)
        val buildIconPaint = Paint().apply {
            color = Color.WHITE
            textSize = 28f  // Gi·∫£m t·ª´ 32f ƒë·ªÉ ph√π h·ª£p v·ªõi n√∫t nh·ªè h∆°n
            textAlign = Paint.Align.CENTER
            isAntiAlias = true
            style = Paint.Style.FILL_AND_STROKE
            strokeWidth = 2f
        }
        canvas.drawText(
            "üß±",
            buildButtonRect.centerX(),
            buildButtonRect.centerY() + 8f,  // Gi·∫£m t·ª´ 10f
            buildIconPaint
        )
    }

    /**
     * ‚ù§Ô∏è V·∫Ω UI ch√≠nh v·ªõi lives, goal counter v√† timer - cƒÉn gi·ªØa c·∫£ ba
     */
    fun drawMainUI(canvas: Canvas, lives: Int, maxLives: Int, currentGoalCount: Int, totalGoalCount: Int, elapsedTime: Long) {
        // T√≠nh to√°n v·ªã tr√≠ ƒë·ªÉ cƒÉn gi·ªØa c·∫£ ba elements
        val elementWidth = 150f  // Width c·ªßa lives v√† goal UI
        val timerWidth = 120f    // Width c·ªßa timer UI
        val gap = 15f           // Kho·∫£ng c√°ch gi·ªØa c√°c elements

        // T·ªïng width c·ªßa c·∫£ ba elements v√† gaps
        val totalWidth = elementWidth + gap + elementWidth + gap + timerWidth
        val startX = screenWidth / 2f - totalWidth / 2f  // CƒÉn gi·ªØa to√†n b·ªô nh√≥m

        // V·∫Ω t·ª´ng element v·ªõi v·ªã tr√≠ t√≠nh to√°n
        drawLivesUI(canvas, lives, maxLives, startX)
        drawGoalCounter(canvas, currentGoalCount, totalGoalCount, startX + elementWidth + gap)
        drawTimerUI(canvas, elapsedTime, startX + elementWidth + gap + elementWidth + gap)
    }

    /**
     * ‚ù§Ô∏è V·∫Ω lives UI (di chuy·ªÉn t·ª´ EffectRenderer)
     */
    private fun drawLivesUI(canvas: Canvas, lives: Int, maxLives: Int, startX: Float = screenWidth / 2f - 150f - 10f) {
        // V·∫Ω lives UI t·∫°i v·ªã tr√≠ startX
        val uiWidth = 150f
        val uiHeight = 100f
        val uiRect = RectF(
            startX,                           // V·ªã tr√≠ ƒë∆∞·ª£c truy·ªÅn v√†o
            200f,                             // C√°ch top 250px (th·∫•p xu·ªëng th√™m 100px)
            startX + uiWidth,                 // Width 150px
            250f + uiHeight                   // Chi·ªÅu cao
        )

        // V·∫Ω n·ªÅn
        val uiPaint = Paint().apply {
            color = Color.parseColor("#FFFF99")  // N·ªÅn v√†ng cho lives
            style = Paint.Style.FILL
        }
        canvas.drawRoundRect(uiRect, 15f, 15f, uiPaint)

        // V·∫Ω vi·ªÅn
        val borderPaint = Paint().apply {
            color = Color.RED
            style = Paint.Style.STROKE
            strokeWidth = 3f
        }
        canvas.drawRoundRect(uiRect, 15f, 15f, borderPaint)

        // V·∫Ω text
        val textPaint = Paint().apply {
            color = Color.BLACK
            textSize = 62f
            textAlign = Paint.Align.CENTER
            isAntiAlias = true
            style = Paint.Style.FILL_AND_STROKE
            strokeWidth = 2f
        }

        val centerX = uiRect.centerX()
        val centerY = uiRect.centerY() + 8f

        // V·∫Ω "‚ù§Ô∏è" emoji
        val shadowPaint = Paint().apply {
            color = Color.BLACK
            textSize = 50f
            textAlign = Paint.Align.CENTER
            isAntiAlias = true
            style = Paint.Style.FILL_AND_STROKE
            strokeWidth = 1f
        }
        canvas.drawText("‚ù§Ô∏è", centerX + 1f, centerY + 1f, shadowPaint)
        canvas.drawText("‚ù§Ô∏è", centerX, centerY, textPaint)

        // V·∫Ω s·ªë m·∫°ng ·ªü d∆∞·ªõi d·∫°ng current/max
        val livesTextPaint = Paint().apply {
            color = Color.BLACK
            textSize = 40f
            textAlign = Paint.Align.CENTER
            isAntiAlias = true
            style = Paint.Style.FILL_AND_STROKE
            strokeWidth = 1f
        }
        canvas.drawText("$lives/$maxLives", centerX, uiRect.bottom - 20f, livesTextPaint)
    }

    /**
     * üéØ V·∫Ω counter hi·ªÉn th·ªã s·ªë h·ªôp ƒë√£ v√†o goal (t∆∞∆°ng t·ª± lives UI)
     */
    fun drawGoalCounter(canvas: Canvas, currentCount: Int, totalCount: Int, startX: Float = screenWidth / 2f + 10f) {
        // ƒê·∫∑t goal counter t·∫°i v·ªã tr√≠ startX
        val uiWidth = 150f
        val uiHeight = 100f

        val counterRect = RectF(
            startX,                                  // V·ªã tr√≠ ƒë∆∞·ª£c truy·ªÅn v√†o
            200f,                                     // C√πng level y v·ªõi lives UI
            startX + uiWidth,                         // Width 150px (gi·ªëng lives)
            250f + uiHeight                           // Height 100px (gi·ªëng lives)
        )

        // V·∫Ω n·ªÅn (t∆∞∆°ng t·ª± lives UI nh∆∞ng m√†u kh√°c)
        val uiPaint = Paint().apply {
            color = Color.parseColor("#99FF99")  // N·ªÅn xanh l√° cho boxes (t∆∞∆°ng t·ª± v√†ng c·ªßa lives)
            style = Paint.Style.FILL
        }
        canvas.drawRoundRect(counterRect, 15f, 15f, uiPaint)

        // V·∫Ω vi·ªÅn (t∆∞∆°ng t·ª± lives UI)
        val borderPaint = Paint().apply {
            color = Color.parseColor("#00AA00")  // Vi·ªÅn xanh l√° ƒë·∫≠m
            style = Paint.Style.STROKE
            strokeWidth = 3f
        }
        canvas.drawRoundRect(counterRect, 15f, 15f, borderPaint)

        // V·∫Ω box icon (thay v√¨ text "Boxes:")
        val iconSize = 62f
        val iconLeft = counterRect.centerX() - iconSize / 2
        val iconTop = counterRect.top + 20f
        val iconRight = iconLeft + iconSize
        val iconBottom = iconTop + iconSize

        resourceManager.boxIcon.setBounds(
            iconLeft.toInt(),
            iconTop.toInt(),
            iconRight.toInt(),
            iconBottom.toInt()
        )
        resourceManager.boxIcon.draw(canvas)

        // V·∫Ω s·ªë l∆∞·ª£ng current/total (·ªü d∆∞·ªõi icon, t∆∞∆°ng t·ª± lives UI)
        val textPaint = Paint().apply {
            color = if (currentCount == totalCount) Color.GREEN else Color.BLACK
            textSize = 40f  // Nh·ªè h∆°n lives UI (62f) v√¨ c√≥ √≠t s·ªë h∆°n
            textAlign = Paint.Align.CENTER
            isAntiAlias = true
            style = Paint.Style.FILL_AND_STROKE
            strokeWidth = 1f
        }

        val centerX = counterRect.centerX()
        val centerY = counterRect.bottom - 20f  // C√°ch bottom 20px

        // Shadow effect nh·∫π
        val shadowPaint = Paint().apply {
            color = Color.BLACK
            textSize = 40f
            textAlign = Paint.Align.CENTER
            isAntiAlias = true
            style = Paint.Style.FILL_AND_STROKE
            strokeWidth = 0.5f
        }
        val countText = "$currentCount/$totalCount"
        canvas.drawText(countText, centerX + 1f, centerY + 1f, shadowPaint)
        canvas.drawText(countText, centerX, centerY, textPaint)

        // V·∫Ω star emoji n·∫øu ƒë√£ ho√†n th√†nh (·ªü g√≥c tr√™n ph·∫£i)
        if (currentCount == totalCount && totalCount > 0) {
            val starPaint = Paint().apply {
                textSize = 24f
                textAlign = Paint.Align.RIGHT
                isAntiAlias = true
            }
            canvas.drawText(
                "‚≠ê",
                counterRect.right - 10f,
                counterRect.top + 30f,
                starPaint
            )
        }
    }

    /**
     * ‚è±Ô∏è V·∫Ω timer hi·ªÉn th·ªã th·ªùi gian level (c·∫°nh lives v√† goal counter)
     */
    private fun drawTimerUI(canvas: Canvas, elapsedTime: Long, startX: Float = screenWidth / 2f + 150f + 40f) {
        // ƒê·∫∑t timer t·∫°i v·ªã tr√≠ startX
        val timerWidth = 120f  // Thu nh·ªè ƒë·ªÉ v·ª´a c·∫£ ba elements
        val timerHeight = 100f  // C√πng height v·ªõi lives/goal UI

        val timerRect = RectF(
            startX,                          // V·ªã tr√≠ ƒë∆∞·ª£c truy·ªÅn v√†o
            200f,                           // C√πng level y v·ªõi lives/goal UI
            startX + timerWidth,            // Width nh·ªè h∆°n
            250f + timerHeight              // C√πng height
        )

        // V·∫Ω n·ªÅn v·ªõi gradient effect
        val bgPaint = Paint().apply {
            color = Color.parseColor("#CC000000")  // Semi-transparent black
            style = Paint.Style.FILL
        }
        canvas.drawRoundRect(timerRect, 10f, 10f, bgPaint)

        // V·∫Ω border
        val borderPaint = Paint().apply {
            color = Color.parseColor("#FF4444")  // Red border
            style = Paint.Style.STROKE
            strokeWidth = 2f
        }
        canvas.drawRoundRect(timerRect, 10f, 10f, borderPaint)

        // Convert elapsed time to minutes:seconds format
        val totalSeconds = elapsedTime / 1000
        val minutes = totalSeconds / 60
        val seconds = totalSeconds % 60

        val timeText = String.format("%02d:%02d", minutes, seconds)

        // V·∫Ω text th·ªùi gian
        val timePaint = Paint().apply {
            color = Color.WHITE
            textSize = 32f
            textAlign = Paint.Align.CENTER
            isAntiAlias = true
            typeface = Typeface.create(Typeface.MONOSPACE, Typeface.BOLD)  // Monospace ƒë·ªÉ cƒÉn ch·ªânh s·ªë
        }

        val centerX = timerRect.centerX()
        val centerY = timerRect.bottom - 20f  // ·ªû d√≤ng d∆∞·ªõi, c√°ch bottom 20px

        // Shadow effect
        val shadowPaint = Paint().apply {
            color = Color.BLACK
            textSize = 32f
            textAlign = Paint.Align.CENTER
            isAntiAlias = true
            typeface = Typeface.create(Typeface.MONOSPACE, Typeface.BOLD)
        }
        canvas.drawText(timeText, centerX + 1f, centerY + 1f, shadowPaint)
        canvas.drawText(timeText, centerX, centerY, timePaint)

        // V·∫Ω time icon ·ªü d√≤ng tr√™n
        val iconSize = 62f
        val iconLeft = timerRect.centerX() - iconSize / 2  // CƒÉn gi·ªØa ngang
        val iconTop = timerRect.top + 20f                  // C√°ch top 15px
        val iconRight = iconLeft + iconSize
        val iconBottom = iconTop + iconSize

        resourceManager.timeIcon.setBounds(
            iconLeft.toInt(),
            iconTop.toInt(),
            iconRight.toInt(),
            iconBottom.toInt()
        )
        resourceManager.timeIcon.draw(canvas)
    }
}
